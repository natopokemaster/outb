xquery version "1.0" encoding "UTF-8";

(::pragma  xds <x:xds targetType="iden:Contrato" xmlns:x="urn:annotations.ld.bea.com" xmlns:iden="http://www.netservicos.com.br/atendimento/identificacaocontrato">
    <creationDate>2009-11-27T13:52:30</creationDate>
    <userDefinedView/>
</x:xds>::)


declare namespace snc= "ld:br/com/netservicos/atendimento/contrato/physical/netsms/table/SnChamadaDSP";

declare namespace sna= "ld:br/com/netservicos/atendimento/contrato/physical/netsms/table/SnAtendimentoAssDSP";

import schema namespace ide="http://www.netservicos.com.br/atendimento/identificacaocontrato" at "ld:br/com/netservicos/atendimento/contrato/logical/schemas/IdentificacaoContrato.xsd";

declare namespace tns="ld:br/com/netservicos/atendimento/contrato/logical/ConsultarContratoContatoDSL";

(::pragma  function <f:function kind="read" visibility="public" isPrimary="true" xmlns:f="urn:annotations.ld.bea.com"/>::)

declare function tns:consultarContratoPorProtocolo($numeroProtocolo as xs:string) as element(ide:Contrato)*{
for $SnAtendimentoAssDSP in sna:SnAtendimentoAssDSP()
for $SnChamadaDSP in snc:SnChamadaDSP()
where $numeroProtocolo eq $SnChamadaDSP/ID_PROTOCOLO
where $SnChamadaDSP/ID_CHAMADA eq $SnAtendimentoAssDSP/ID_CHAMADA
group by $SnAtendimentoAssDSP/NUM_CONTRATO as $distinct_NUM_CONTRATO,$SnAtendimentoAssDSP/CID_CONTRATO as $distinct_CID_CONTRATO
return
        <ide:Contrato>
            <NumeroContrato>{fn:data($distinct_NUM_CONTRATO)}</NumeroContrato>
            {
                if (false()) then 
                    <CodigoOperadora></CodigoOperadora>
                else
                    <IdentificacaoCidade>{fn:data($distinct_CID_CONTRATO)}</IdentificacaoCidade>
            }
        </ide:Contrato>
    

};


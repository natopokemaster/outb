<project name="NETCRM Business Core">

	<description>
	Este projeto possui o objetivo de dar suporte a desenvolvimento nos projetos 
	da NETSERVICOS
    </description>

	<!-- carrega as propriedades do projeto -->
	<property file="build.properties" />
	<!-- carrega as propriedades do servidor -->
	<property file="server_config.properties" />
	<!-- carrega as propriedades do cvs -->
	<property file="cvs.properties" />

	<!-- path para definição de tarefas -->
	<path id="classpath">
		<fileset dir="../NETLib" includes="**/*.jar" />
		<pathelement location="../${common.project}/build" /> 
	</path>

	<path id="classpath.weblogic">
		<fileset dir="${wl.home}/server/lib" includes="*weblogic.jar" />
		<fileset dir="${wl.install}/modules" includes="*com.bea.core.datasource6_1.4.0.0.jar" />
	</path>
	
	<!-- path to compile the project -->
	<path id="classpath.compile">
		<fileset dir="../NETLib" includes="**/*.jar" />
		<fileset dir="${wl.home}/server/lib" includes="*weblogic.jar" />
		<fileset dir="${wl.install}/modules" includes="*com.bea.core.datasource6_1.4.0.0.jar" />
		<pathelement location="../${common.project}/build" />
		<pathelement location="../${core.geral.project}/build" />
		<pathelement location="../NETCRMEvent/build" />
		<pathelement location="../NETCRMProduto/build" />
		<pathelement location="../NETCRMOrderManagement/build" />
		<pathelement location="../NETCRMVenda/build" />
		<pathelement location="../NETCRMAtendimento/build" />
		<pathelement location="../NETCRMCliente/build" />
		<pathelement location="../NETCRMProspect/build" />
		<pathelement location="../NETCRMOMS/build" />
		<pathelement location="../NETCRMEndereco/build" />
		<pathelement location="../NETCRMGesCom/build" />
	</path>



	<!-- bibliotecas inseridas no ear e nos manifests -->
	<fileset id="libs" dir="../NETLib" includes="${application.libs}" />
	<fileset id="libs.manifest" dir="../NETLib" includes="${application.libs.manifest.only}" />
	<!--<fileset id="libs.properties" dir="../${core.config.lib.project}/dist" includes="${filename.properties.jar}" />-->

	<!-- ================================= 
          target: core              
         ================================= -->
	<target name="core">

		<!-- task usada para percorrer a lista de projetos core -->
		<taskdef name="for" classname="net.sf.antcontrib.logic.For" classpathref="classpath" />

		<!-- para todos projetos core limpa e executa as rotinas de geração de
		interfaces ejb e descritor-->
		<for list="${core.projects}" param="project">
			<sequential>

				<!-- task utilizada para gerar interfaces ejb e descritores -->
				<taskdef name="ejbdoclet" classname="xdoclet.modules.ejb.EjbDocletTask" classpathref="classpath" />

				<!-- gera as interfaces e o descritor do projeto ejb que está 
				sendo executado considerando apenas *EJBImpl -->
				<ejbdoclet destdir="../@{project}/gen">
					<weblogic version="8.1" createtables="Disabled" templateFile="templates/ejb/weblogic-ejb-jar-xml-custom.xdt" />
					<deploymentdescriptor templateFile="templates/ejb/ejb-jar_xml-custom.xdt" mergeDir="templates/ejb" />
					<remoteinterface />
					<localinterface />
					<homeinterface />
					<localhomeinterface />
					<packageSubstitution packages="facade.impl" substituteWith="facade" />

					<fileset dir="../@{project}/src" includes="**/*EJBImpl.java" />
				</ejbdoclet>
			</sequential>
		</for>

	</target>

	<!-- ================================= 
          target: common              
         ================================= -->
	<target name="common">

		<taskdef name="if" classname="net.sf.antcontrib.logic.IfTask" classpathref="classpath" />

		<taskdef name="var" classname="net.sf.antcontrib.property.Variable" classpathref="classpath" />

		<var name="enviroment.show_sql" value="${hibernate.show_sql}" />
		<if>
			<isset property="enviroment.type" />
			<then>
				<var name="enviroment.show_sql" value="false" />
			</then>
		</if>
		<echo level="info">Configuring hibernate show_sql to ${enviroment.show_sql}</echo>

		<!-- task para geração do arquivo de configuração do hibernate e seus
		dos mapeamentos com base nas anotações -->
		<taskdef name="hibernatedoclet" classname="xdoclet.modules.hibernate.HibernateDocletTask" classpathref="classpath" />



		<!-- gera os mapeamentos e o arquivo de configuração do hibernate com
		todos mapeamentos descritos e configurações em um template customizado
		para ignorar a declaração do dataSource e ficar compatível com o
		netframework -->
		<hibernatedoclet destdir="../${common.project}/gen" mergedir="../${common.project}/bean/src" force="true">

			<hibernate version="3.0" templatefile="templates/hibernate-custom.xdt" />

			<hibernatecfg version="3.0" dialect="${hibernate.dialect}" showSql="${enviroment.show_sql}" transactionManagerLookup="${hibernate.transactionManagerLookup}" dataSource="ignorado no template customizado" templateFile="templates/hibernate-cfg-custom.xdt" />

			<fileset dir="../${common.project}/bean/src" includes="**/*Bean.java" />
		</hibernatedoclet>
	</target>

	<!-- ================================= 
          target: publish              
         ================================= -->
	<target name="publish" description="tarefa que faz o empacotamento de todos projetos do NET CRM Business Core">
		<mkdir dir="${ear.dir}" />
		<mkdir dir="${ear.dir}/META-INF" />

		<antcall target="enviroment.config" />

		<!-- task usada para logico -->
		<taskdef name="if" classname="net.sf.antcontrib.logic.IfTask" classpathref="classpath" />

		<!-- task usada para percorrer todos projetos -->
		<taskdef name="for" classname="net.sf.antcontrib.logic.For" classpathref="classpath" />


		<!-- geração dos descritores da aplicação contendo todos roles  -->
		<taskdef name="doclet" classname="xdoclet.DocletTask" classpathref="classpath" />

		<taskdef name="var" classname="net.sf.antcontrib.property.Variable" classpathref="classpath" />

		<taskdef name="netjndiresolver" classname="br.com.netservicos.framework.buildvalidator.task.NETFrameworkJNDIResolver" classpathref="classpath" />

		<if>
			<isset property="enviroment.type" />
			<then>
				<echo level="info">Deleting the application descriptors</echo>
				<delete>
					<fileset dir="${ear.dir}/META-INF">
						<include name="application.xml" />
						<include name="weblogic-application.xml" />
					</fileset>
				</delete>
				<echo level="info">Deleting the javascript files</echo>
				<delete failonerror="false">
					<fileset dir="${dir.javascript.files}">
						<include name="**/*.*" />
					</fileset>
				</delete>
			</then>

		</if>

		<doclet destdir="${ear.dir}/META-INF">
			<fileset dir="../${core.geral.project}/src" includes="**/*EJBImpl.java" />
			<fileset dir="../${core.event.project}/src" includes="**/*EJBImpl.java" />
			<fileset dir="../${core.produto.project}/src" includes="**/*EJBImpl.java" />
			<fileset dir="../${core.ordermanagement.project}/src" includes="**/*EJBImpl.java" />
			<fileset dir="../${core.venda.project}/src" includes="**/*EJBImpl.java" />
			<fileset dir="../${core.atendimento.project}/src" includes="**/*EJBImpl.java" />
			<fileset dir="../${core.cliente.project}/src" includes="**/*EJBImpl.java" />
			<fileset dir="../${core.prospect.project}/src" includes="**/*EJBImpl.java" />
			<fileset dir="../${core.oms.project}/src" includes="**/*EJBImpl.java" />
			<fileset dir="../${core.gescom.project}/src" includes="**/*EJBImpl.java" />
			<template templateFile="templates/application-xml.xdt" destinationFile="application.xml">
				<configParam name="excludeWebContext" value="${excludeWebContext}" />
			</template>

			<template templateFile="templates/weblogic-application-xml.xdt" destinationFile="weblogic-application.xml">
				<configParam name="excludeWebContext" value="${excludeWebContext}" />
			</template>
		</doclet>

		<antcall target="jndiresolver" />

		<!-- copia todas as libs para dentro da estrutura do projeto -->
		<copy flatten="true" todir="${ear.dir}">
			<fileset refid="libs" />
		</copy>

		<!-- converte os arquivos de lib em string para usar no manifest -->
		<pathconvert property="manifest" pathsep=" ">
			<path>
				<fileset refid="libs" />
				<fileset refid="libs.manifest" />
				<!--<fileset refid="libs.properties" />-->
			</path>
			<mapper>
				<flattenmapper />
			</mapper>
		</pathconvert>

		<!-- task usada para concatenar todas entradass do manifest -->
		<taskdef name="var" classname="net.sf.antcontrib.property.Variable" classpathref="classpath" />

		<!-- percorre todos projetos core -->
		<for list="${core.projects}" param="project">
			<sequential>
				<var name="dependencyCore" value="@{project}Client.jar @{project}Common.jar ${common.project}.jar" />

				<var name="dependencyClient" value="@{project}Common.jar ${common.project}.jar" />


				<!-- concatena todos core com dependencia no manifest -->
				<for list="${core.dependency.@{project}}" param="dep">
					<sequential>
						<var name="dependencyCore" value="${dependencyCore} @{dep}Client.jar @{dep}Common.jar" />
					</sequential>
				</for>

				<mkdir dir="../@{project}/dist/jars" />

				<!-- gera o EJB.jar contendo apenas o ejb-jar.xml e as classes
				de implementação dos ejbs -->
				<jar destfile="../@{project}/dist/jars/@{project}EJB.jar">

					<fileset dir="../@{project}/build">
						<include name="**/*EJBImpl.class" />
					</fileset>

					<metainf dir="../@{project}/gen" includes="ejb-jar.xml,weblogic-ejb-jar.xml" />

					<manifest>
						<attribute name="Class-Path" value="${manifest} ${dependencyCore} ${core.config.project}.jar" />
					</manifest>
				</jar>


				<!-- gera o client com todos outros arquivos que estao em source
				folder do projeto -->
				<jar destfile="../@{project}/dist/jars/@{project}Client.jar">
					<fileset dir="../@{project}/build">
						<include name="**/*EJB.class" />
						<include name="**/*EJBHome.class" />
						<include name="**/*EJBLocal.class" />
						<include name="**/*EJBLocalHome.class" />
						<include name="**/*Service.class" />
					</fileset>


					<manifest>
						<attribute name="Class-Path" value="${manifest} ${dependencyClient}" />
					</manifest>
				</jar>

				<!-- gera o client com todos outros arquivos que estao em source
				folder do projeto -->
				<jar destfile="../@{project}/dist/jars/@{project}Common.jar">
					<fileset dir="../@{project}/build">
						<exclude name="**/*EJB.class" />
						<exclude name="**/*EJBHome.class" />
						<exclude name="**/*EJBLocal.class" />
						<exclude name="**/*EJBLocalHome.class" />
						<exclude name="**/*EJBImpl.class" />
						<exclude name="**/*Service.class" />
						<exclude name="ejb-jar.xml" />
						<exclude name="weblogic-ejb-jar.xml" />
					</fileset>

					<manifest>
						<attribute name="Class-Path" value="${manifest}" />
					</manifest>
				</jar>

				<copy todir="${ear.dir}">
					<fileset dir="../@{project}/dist/jars">
						<include name="@{project}EJB.jar" />
						<include name="@{project}Common.jar" />
						<include name="@{project}Client.jar" />
					</fileset>
				</copy>

			</sequential>
		</for>

		<var name="dependencyCommon" />
		<for list="${core.projects}" param="project">
			<sequential>
				<var name="dependencyCommon" value="${dependencyCommon} @{project}Common.jar" />
			</sequential>
		</for>

		<taskdef name="if" classname="net.sf.antcontrib.logic.IfTask" classpathref="classpath" />

		<!-- empacotamento do core config -->
		<jar destfile="${ear.dir}/${core.config.project}.jar" duplicate="preserve">
			<fileset dir="../${core.config.project}/build" includes="**/*.*" />
			<manifest>
				<attribute name="Class-Path" value="${manifest}" />
			</manifest>
		</jar>
		<mkdir dir="../${common.project}/dist/jars" />

		<!-- empacotamento do netcommons -->
		<jar destfile="../${common.project}/dist/jars/${common.project}.jar">
			<fileset dir="../${common.project}/gen" excludes="**/*.java" />
			<fileset dir="../${common.project}/bean/src" excludes="**/*.java" />
			<fileset dir="../${common.project}/build">
				<exclude name="**/*.xml" />
			</fileset>

			<manifest>
				<attribute name="Class-Path" value="${manifest} ${dependencyCommon}" />
			</manifest>
		</jar>

		<copy todir="${ear.dir}">
			<fileset dir="../${common.project}/dist/jars/">
				<include name="${common.project}.jar" />
			</fileset>
		</copy>

		<!--
		<antcall target="minimize.javascript.files"/>
		
		<mkdir dir="${ear.dir}/${filename.war}/META-INF/"/>
	   	<manifest file="${ear.dir}/${filename.war}/META-INF/MANIFEST.MF">
	    	   	<attribute name="Class-Path" value="${manifest}" />
	   	</manifest>
		    	
		<copy todir="${ear.dir}/${filename.war}">
			<fileset dir="../${web.project}/web/webroot">
				<exclude name="**/*.jrxml" />
				<exclude name="**/*.js" />
			</fileset>
			<fileset dir="${dir.javascript.files}">
				<include name="**/*.js" />
			</fileset>
		</copy>

		<taskdef name="jaspercompiler"
		         classname="net.sf.jasperreports.ant.JRAntCompileTask"
		         classpathref="classpath" />

		<jaspercompiler srcdir="../${web.project}/web/src"
		                destdir="${ear.dir}/${filename.war}/WEB-INF/classes">
			<include name="**/*.jrxml" />
			<classpath refid="classpath" />
		</jaspercompiler>
		
		
		<antcall target="copyServerLibaries"/>
		-->
	</target>

	<!-- - - - - - - - - - - - - - - - - - 
          target: enviroment.config                      
         - - - - - - - - - - - - - - - - - -->
	<target name="enviroment.config" description="--> Configure the enviroment variables">
		<taskdef name="if" classname="net.sf.antcontrib.logic.IfTask" classpathref="classpath" />

		<taskdef name="var" classname="net.sf.antcontrib.property.Variable" classpathref="classpath" />

		<var name="cache.overflow.to.disk" value="false" />
		<if>
			<isset property="enviroment.type" />
			<then>
				<var name="cache.overflow.to.disk" value="true" />
				<echo level="info">Configuring the enviroment for ${enviroment.type}</echo>
			</then>
			<else>
				<echo level="info">Configuring the enviroment for development</echo>
			</else>
		</if>
		<echo level="info">Configuring the parameter "overflow the disk" of ehcache to ${cache.overflow.to.disk}</echo>
		<filter token="@cache.overflow.to.disk@" value="${cache.overflow.to.disk}" />
		<mkdir dir="../${core.config.project}/build" />
		<copy todir="../${core.config.project}/build" filtering="true" overwrite="true">
			<fileset dir="../${core.config.project}/src" includes="**/*.*" />
		</copy>

	</target>


	<!-- ================================= 
          target: hotdeploy              
         ================================= -->
	<target name="hotdeploy">
		<taskdef name="if" classname="net.sf.antcontrib.logic.IfTask" classpathref="classpath" />
		<!-- task usada para concatenar todas entradass do manifest -->
		<taskdef name="var" classname="net.sf.antcontrib.property.Variable" classpathref="classpath" />

		<antcall target="minimize.javascript.files" />
		<!--
		<if>
			<isset property="resource.name" />
			<then>
				<copy todir="${ear.dir}/${filename.war}">
					<fileset 	dir="../${web.project}/web/webroot"
					         	includes="**/${resource.name}"
							  	excludes="**/*.js"/>
				</copy>
			</then>
			<else>
				<copy todir="${ear.dir}/${filename.war}">
					<fileset dir="../${web.project}/web/webroot" excludes="**/*.js"/>
					<fileset dir="${dir.javascript.files}">
						<include name="**/*.js" />
					</fileset>
				</copy>
			</else>
		</if>
		<antcall target="enviroment.config"/>
		-->
	</target>

	<!-- ================================= 
          target: deploy              
         ================================= -->
	<target name="deploy">
		<taskdef name="wldeploy" classname="weblogic.ant.taskdefs.management.WLDeploy" classpathref="classpath.weblogic" />

		<wldeploy action="deploy" name="${wl.nome.application}" source="${ear.dir}" user="${wl.user}" password="${wl.pass}" adminurl="${wl.admin.url}" targets="${wl.server}" remote="true" upload="true" />
	</target>

	<!-- ================================= 
          target: undeploy              
         ================================= -->
	<target name="undeploy">
		<taskdef name="wldeploy" classname="weblogic.ant.taskdefs.management.WLDeploy" classpathref="classpath.weblogic" />

		<wldeploy action="undeploy" name="${wl.nome.application}" user="${wl.user}" password="${wl.pass}" adminurl="${wl.admin.url}" targets="${wl.server}" />
	</target>

	<!-- ================================= 
          target: redeploy              
         ================================= -->
	<target name="redeploy">
		<taskdef name="wldeploy" classname="weblogic.ant.taskdefs.management.WLDeploy" classpathref="classpath.weblogic" />

		<wldeploy action="redeploy" name="${wl.nome.application}" user="${wl.user}" password="${wl.pass}" adminurl="${wl.admin.url}" targets="${wl.server}" />
	</target>


	<!-- - - - - - - - - - - - - - - - - - 
          target: clean                      
         - - - - - - - - - - - - - - - - - -->
	<target name="clean">

		<taskdef name="for" classname="net.sf.antcontrib.logic.For" classpathref="classpath" />

		<for list="${core.projects}" param="project">
			<sequential>
				<delete>
					<fileset dir="../@{project}/gen">
						<include name="**/*.*" />
						<exclude name="**/.cvsignore" />
					</fileset>
					<fileset dir="../@{project}/build">
						<include name="**/*.*" />
						<exclude name="**/.cvsignore" />
					</fileset>
				</delete>
			</sequential>
		</for>

		<delete>
			<fileset dir="../${common.project}/gen">
				<include name="**/*.*" />
				<exclude name="**/.cvsignore" />
			</fileset>
			<fileset dir="../${common.project}/build">
				<include name="**/*.*" />
				<exclude name="**/.cvsignore" />
			</fileset>
		</delete>

		<!-- <delete>
			<fileset dir="../${web.project}/web/webroot/WEB-INF/classes">
				<include name="**/*.*" />
				<exclude name="**/.cvsignore" />
			</fileset>
		</delete>
		-->

		<delete>
			<fileset dir="../${core.config.project}/build/">
				<include name="**/*.*" />
				<exclude name="**/.cvsignore" />
			</fileset>
		</delete>

		<delete dir="${ear.dir}" />
		<mkdir dir="${ear.dir}" />

		<echo level="info">Deleting the javascript files</echo>
		<delete failonerror="false">
			<fileset dir="${dir.javascript.files}">
				<include name="**/*.*" />
			</fileset>
		</delete>

	</target>

	<!-- - - - - - - - - - - - - - - - - - 
          target: compile                      
         - - - - - - - - - - - - - - - - - -->
	<target name="compile" description="--> Compiles the projects, used by an external build">
		<taskdef name="for" classname="net.sf.antcontrib.logic.For" classpathref="classpath" />

		<!-- build common -->
		<javac destdir="../${common.project}/build" srcdir="../${common.project}/bean/src" classpathref="classpath.compile" source="1.5" target="1.5" debug="true" />

		<copy todir="../${common.project}/build">
			<fileset dir="../${common.project}/bean//src">
				<include name="**/*.xml" />
				<include name="**/*.properties" />
			</fileset>
			<fileset dir="../${common.project}/gen">
				<include name="**/*.xml" />
				<include name="**/*.properties" />
			</fileset>
		</copy>

		<!-- build modules -->
		<for list="${core.projects}" param="project">
			<sequential>
				<javac destdir="../@{project}/build" srcdir="../@{project}/src" classpathref="classpath.compile" source="1.5" target="1.5" debug="true" />
				<javac destdir="../@{project}/build" srcdir="../@{project}/gen" classpathref="classpath.compile" source="1.5" target="1.5" debug="true" />

				<copy todir="../@{project}/build">
					<fileset dir="../@{project}/src">
						<include name="**/*.xml" />
						<include name="**/*.properties" />
						<include name="**/*.jpg" />
						<include name="**/*.png" />
					</fileset>
					<fileset dir="../@{project}/gen">
						<include name="**/*.xml" />
						<include name="**/*.properties" />
					</fileset>
				</copy>

				<taskdef name="jaspercompiler"
				         classname="net.sf.jasperreports.ant.JRAntCompileTask"
				         classpathref="classpath" />

				<jaspercompiler srcdir="../@{project}/src" destdir="../@{project}/build">
					<include name="**/*.jrxml" />
					<classpath refid="classpath" />
				</jaspercompiler>	
			</sequential>
		</for>
		<!-- build web -->
		<!--
		 <javac 	srcdir="../${web.project}/web/src"
		       	destdir="../${web.project}/web/webroot/WEB-INF/classes"
		       	classpathref="classpath.compile"
				source="1.5"
				target="1.5"
				debug="true"/>

		<copy todir="../${web.project}/web/webroot/WEB-INF/classes">
			<fileset dir="../${web.project}/web/src" >
			    <include name="**/*.xml"/>
				<include name="**/*.properties"/>
			</fileset>
		</copy>
		-->

	</target>

	<!-- - - - - - - - - - - - - - - - - - 
          target: init                      
         - - - - - - - - - - - - - - - - - -->
	<target name="init" description="--> Creates the default diretories, used by an external build">

		<taskdef name="for" classname="net.sf.antcontrib.logic.For" classpathref="classpath" />

		<for list="${core.projects}" param="project">
			<sequential>
				<mkdir dir="../@{project}/gen" />
				<mkdir dir="../@{project}/build" />
				<mkdir dir="../@{project}/dist" />
			</sequential>
		</for>

		<mkdir dir="../${common.project}/build" />
		<mkdir dir="../${common.project}/gen" />
		<mkdir dir="../${common.project}/dist" />

		<mkdir dir="../${core.config.project}/build/" />
		<mkdir dir="../${core.config.project}/dist/" />

		<!-- <mkdir dir="../${web.project}/web/webroot/WEB-INF/classes"/> -->

		<mkdir dir="../dist" />

	</target>

	<!-- - - - - - - - - - - - - - - - - - 
          target: ear                      
         - - - - - - - - - - - - - - - - - -->
	<target name="ear" description="--> Creates the EAR for the project">

		<mkdir dir="${dist.dir}" />

		<!-- <zip destfile="${dist.dir}/${filename.war}" basedir="${ear.dir}/${filename.war}"></zip> -->

		<!-- task usada para logico -->
		<taskdef name="if" classname="net.sf.antcontrib.logic.IfTask" classpathref="classpath" />

		<taskdef name="var" classname="net.sf.antcontrib.property.Variable" classpathref="classpath" />

		<var name="ear.destination.file" value="${filename.ear}" />

		<if>
			<isset property="batch.deploy" />
			<then>
				<var name="ear.destination.file" value="${filename.ear.batch}" />
			</then>
		</if>

		<delete>
			<fileset dir="${dist.dir}">
				<include name="${ear.destination.file}" />
			</fileset>
		</delete>


		<zip destfile="${dist.dir}/${ear.destination.file}" basedir="${ear.dir}">
			<exclude name="${filename.war}/**" />
			<!--<fileset dir="${dist.dir}">
				<include name="${filename.war}"/>
			</fileset>
			-->
		</zip>
		<!--
		<delete>
			<fileset dir="${dist.dir}">
				<include name="${filename.war}"/>
			</fileset>
		</delete>
        
		
		<if>
			<isset property="batch.deploy" />
			<then>
				<echo level="info">Not creating the static content file</echo>
			</then>
			<else>
				<echo level="info">Creating the static content file</echo>
				<antcall target="copyStaticInformation"/>
			</else>
		</if>

		-->
	</target>


	<!-- - - - - - - - - - - - - - - - - - 
          target: copyStaticInformation                      
         - - - - - - - - - - - - - - - - - -->
	<target name="copyStaticInformation" description="--> Copies the static files to a seperate directory to be deployed in the http server">

		<echo level="info">Copying the static information.</echo>

		<delete dir="${dist.dir}/static_files" failonerror="false" />
		<mkdir dir="${dist.dir}/static_files" />

		<copy todir="${dist.dir}/static_files">
			<fileset dir="../${web.project}/web/webroot/">
				<include name="**/*.gif" />
				<include name="**/*.jpg" />
				<include name="**/*.css" />
				<exclude name="/META-INF/**" />
				<exclude name="/WEB-INF/**" />
				<exclude name="**/*.js" />
			</fileset>
			<fileset dir="${dir.javascript.files}">
				<include name="**/*.js" />
			</fileset>
		</copy>
		<zip destfile="${dist.dir}/apache_static_context.zip" basedir="${dist.dir}/static_files/" />
		<delete dir="${dist.dir}/static_files" failonerror="false" />


	</target>


	<!-- - - - - - - - - - - - - - - - - - 
          target: copyServerLibaries                      
         - - - - - - - - - - - - - - - - - -->
	<target name="copyServerLibaries">
		<taskdef name="if" classname="net.sf.antcontrib.logic.IfTask" classpathref="classpath" />
		<taskdef name="var" classname="net.sf.antcontrib.property.Variable" classpathref="classpath" />

		<var name="destination.libs.server.domain" value="${wl.server.domain.lib}" />
		<var name="destination.libs.server.mbean" value="${wl.server.lib.mbean}" />
		<if>
			<isset property="enviroment.type" />
			<then>
				<var name="destination.libs.server.domain" value="${dist.dir}" />
				<var name="destination.libs.server.mbean" value="${dist.dir}" />
			</then>
		</if>


		<echo level="info">Copying framework domain libs to the server : ${destination.libs.server.domain}</echo>
		<copy todir="${destination.libs.server.domain}" flatten="true">
			<fileset dir="../NETLib" includes="${domain.libs}" />
		</copy>

		<echo level="info">Copying commons e log jars to the server : ${destination.libs.server.domain}</echo>
		<copy todir="${destination.libs.server.domain}" flatten="true">
			<fileset dir="../NETLib" includes="${domain.3rdparty.libs}" />
		</copy>

		<echo level="info">Copying ${filename.framework.security.provider.jar} to the server : ${destination.libs.server.mbean}</echo>
		<copy todir="${destination.libs.server.mbean}" flatten="true">
			<fileset dir="${lib.framework.build.dir}">
				<include name="${filename.framework.security.provider.jar}" />
			</fileset>
		</copy>

		<echo level="info">Copying the log4j configuration file : ${filename.config.log4j} to the server : ${wl.server.domain}</echo>
		<copy todir="${wl.server.domain}" flatten="true">
			<fileset dir="${dir.config.log4j}">
				<include name="${filename.config.log4j}" />
			</fileset>
		</copy>

	</target>

	<!-- - - - - - - - - - - - - - - - - - 
          target: minimize.javascript.files                      
         - - - - - - - - - - - - - - - - - -->
	<target name="minimize.javascript.files">
		<taskdef name="jsmin" classname="br.com.netservicos.framework.buildvalidator.js.JSMinTask" classpathref="classpath" />

		<mkdir dir="${dir.javascript.files}" />

		<var name="force.jsmin" value="false" />
		<if>
			<isset property="enviroment.type" />
			<then>
				<var name="force.jsmin" value="true" />
			</then>
		</if>


		<!-- tarefa jsmin que lista os arquivos de exlusao conhecidos que nao podem ser minimizados com jsmin  -->
		<jsmin destdir="${dir.javascript.files}" force="${force.jsmin}">
			<fileset dir="../${web.project}/web/webroot" includes="**/*.js">
				<exclude name="**/overlibmws.js" />
				<exclude name="**/prototype.js" />
				<exclude name="**/jquery-1.2.3.js" />
				<exclude name="**/valida_data.js" />
			</fileset>
		</jsmin>

		<!-- a seguir copia os javascript nao minimizados  -->
		<echo level="info">copia diretamente os javascripts que nao podem ser minimzados</echo>
		<copy todir="${dir.javascript.files}">
			<fileset dir="../${web.project}/web/webroot">
				<include name="**/overlibmws.js" />
				<include name="**/prototype.js" />
				<include name="**/jquery-1.2.3.js" />
				<include name="**/valida_data.js" />
			</fileset>
		</copy>


	</target>

	<!-- - - - - - - - - - - - - - - - - -
	 efetua troca de jndi dos ejb para que não haja conflito nas aplicações em
	 produção que compartilhem o mesmo dominio 
	- - - - - - - - - - - - - - - - - -->
	<target name="jndiresolver">

		<echo message="Resolving JNDI - framework libs" />

		<taskdef name="netjndiresolver" classname="br.com.netservicos.framework.buildvalidator.task.NETFrameworkJNDIResolver" classpathref="classpath" />

		<mkdir dir="${dir.jndilibs.file}" />

		<netjndiresolver destdir="${dir.jndilibs.file}" inputjarnetsmsutilityservices="${dir.project.path}/NETLib/runtime/netservicos/NETSMSUtilityServices.jar" inputjarnetsmsutilityservicesclient="${dir.project.path}/NETLib/runtime/netservicos/NETSMSUtilityServicesClient.jar" inputjarnetframeworkejb="${dir.project.path}/NETLib/runtime/netframework/netFrameworkEJB.jar" inputjarnetframeworkutil="${dir.project.path}/NETLib/runtime/netframework/netFrameworkUtil.jar" inputjarnetframeworkfilemanagement="${dir.project.path}/NETLib/runtime/netframework/NETFrameworkFileManagement.jar" applicationName="${application.jndi.name}" />

		<!-- copia os libs com jndis refatorados para dentro da estrutura do projeto -->
		<echo level="info">Updating jars afrer JNDI resolve procedure</echo>
		<copy flatten="true" todir="${ear.dir}">
			<fileset dir="${dir.jndilibs.file}" />
		</copy>
		<echo message="JNDI resolver ok proceeed publishing......" />


	</target>

	<!-- - - - - - - - - - - - - - - - - -
		Executa todo o processo de construcao na sequencia apropriada e realiza deploy no servidor
		- - - - - - - - - - - - - - - - - -->
	<target name="all">
		<sequential>
			<antcall target="core" />
			<antcall target="common" />
			<antcall target="compile" />
			<antcall target="publish" />
			<antcall target="deploy" />
		</sequential>
	</target>

	<!-- - - - - - - - - - - - - - - - - -
			Executa todo o processo de construcao na sequencia apropriada gerando .ear
			- - - - - - - - - - - - - - - - - -->
	<target name="allear">
		<sequential>
			<antcall target="init" />
			<antcall target="clean" />
			<antcall target="core" />
			<antcall target="common" />
			<antcall target="compile" />
			<antcall target="publish" />
			<antcall target="ear" />
		</sequential>
	</target>


</project>
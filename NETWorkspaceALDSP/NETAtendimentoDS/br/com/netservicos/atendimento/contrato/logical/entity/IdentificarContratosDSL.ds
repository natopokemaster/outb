xquery version "1.0" encoding "UTF-8";

(::pragma xds <x:xds targetType="urn:contratoAssinante" xmlns:x="urn:annotations.ld.bea.com" xmlns:urn="http://www.netservicos.com.br/ContratoAssinante"><creationDate>2013-12-20T11:32:16</creationDate><userDefinedView/></x:xds> ::)

declare namespace snc9= "ld:br/com/netservicos/atendimento/contrato/physical/netsms/table/SnContratoCreditoPPVDSP";

declare namespace snp4= "ld:br/com/netservicos/atendimento/contrato/physical/netsms/table/SnProdutoCreditoPPVDSP";

declare namespace snr8= "ld:br/com/netservicos/atendimento/contrato/physical/netsms/table/SnRelPontoProdutoPrecoDSP";

declare namespace ppv= "ld:br/com/netservicos/atendimento/contrato/physical/netsms/table/PpVendaPPVDSP";

declare namespace snr7= "ld:br/com/netservicos/atendimento/contrato/physical/netsms/table/SnRelObjSitCobrancaDSP";

declare namespace sns1= "ld:br/com/netservicos/atendimento/contrato/physical/netsms/table/SnSitCobrancaDSP";

declare namespace snc8= "ld:br/com/netservicos/atendimento/contrato/physical/netsms/table/SnContratoColetivoDSP";

declare namespace snr6= "ld:br/com/netservicos/atendimento/contrato/physical/netsms/table/SnRelContratoMestreFiliadoDSP";

import schema namespace snc7="ld:br/com/netservicos/atendimento/contratovenda/physical/netsms/table/SnContratoDSP" at "ld:br/com/netservicos/atendimento/contratovenda/physical/netsms/table/schemas/SnContratoDSP.xsd";

import schema namespace sna3="ld:br/com/netservicos/atendimento/clienteprospect/physical/netsms/table/SnAssinanteDSP" at "ld:br/com/netservicos/atendimento/clienteprospect/physical/netsms/table/schemas/SnAssinanteDSP.xsd";

import schema namespace snt3="ld:br/com/netservicos/atendimento/contrato/physical/netsms/table/SnTelefoneVoipDSP" at "ld:br/com/netservicos/atendimento/contrato/physical/netsms/table/schemas/SnTelefoneVoipDSP.xsd";

declare namespace sna2= "ld:br/com/netservicos/atendimento/clienteprospect/physical/netsms/table/SnAssinanteDSP";

declare namespace fla2= "ld:br/com/netservicos/atendimento/contrato/physical/netsms/sql/FlagNodeSDDSP";

declare namespace snp3= "ld:br/com/netservicos/atendimento/contrato/physical/netsms/table/SnParametroDSP";

declare namespace snc6= "ld:br/com/netservicos/atendimento/contrato/physical/netsms/table/SnCobrancaDSP";

declare namespace fla1= "ld:br/com/netservicos/atendimento/contrato/physical/netsms/sql/FlagPPVDSP";

declare namespace fla= "ld:br/com/netservicos/atendimento/contrato/physical/netsms/sql/FlagPJDSP";

declare namespace iee= "ld:br/com/netservicos/atendimento/contrato/physical/netsms/sql/IeEnderecosDSP";

declare namespace tes= "ld:br/com/netservicos/atendimento/contrato/physical/netsms/query/Teste";

import schema namespace seg="http://www.netservicos.com.br/SegmentoNegocio" at "ld:br/com/netservicos/atendimento/contrato/logical/schemas/SegmentoNegocio.xsd";

declare namespace snc5= "ld:br/com/netservicos/atendimento/contrato/physical/netsms/table/SnCaracteristicaDSP";

declare namespace snp2= "ld:br/com/netservicos/atendimento/contrato/physical/netsms/table/SnProdutoDSP";

declare namespace snr5= "ld:br/com/netservicos/atendimento/contrato/physical/netsms/table/SnRelPontoProdutoDSP";

import schema namespace ide="http://www.netservicos.com.br/atendimento/identificacaocontrato" at "ld:br/com/netservicos/atendimento/contrato/logical/schemas/IdentificacaoContrato.xsd";

declare namespace snp1= "ld:br/com/netservicos/atendimento/produto/physical/netsms/table/SnProdutoDSP";

declare namespace sos= "ld:br/com/netservicos/atendimento/contrato/physical/netsms/table/SoSegmentoNegociosDSP";

declare namespace snc4= "ld:br/com/netservicos/atendimento/diagnostico/physical/netsms/table/SnCaracteristicaDSP";

declare namespace snr4= "ld:br/com/netservicos/atendimento/produto/physical/netsms/table/SnRelPontoProdutoDSP";

declare namespace snc3= "ld:br/com/netservicos/atendimento/fatura/physical/netsms/table/SnCobrancaDSP";

declare namespace snr3= "ld:br/com/netservicos/atendimento/contrato/physical/netsms/table/SnRelAtributosParametroDSP";

declare namespace snr2= "ld:br/com/netservicos/atendimento/contrato/physical/netsms/table/SnRelContratoPerfilCltDSP";

declare namespace sne= "ld:br/com/netservicos/atendimento/contrato/physical/netsms/table/SnEnderDSP";

declare namespace snp= "ld:br/com/netservicos/atendimento/autorizacaoproduto/physical/netsms/table/SnProdutoDSP";

declare namespace snt2= "ld:br/com/netservicos/atendimento/contrato/physical/netsms/table/SnTelefoneVoipDSP";

declare namespace sna1= "ld:br/com/netservicos/atendimento/contrato/physical/netsms/table/SnAtendimentoAssDSP";

declare namespace snc2= "ld:br/com/netservicos/atendimento/contrato/physical/netsms/table/SnChamadaDSP";

declare namespace snt1= "ld:br/com/netservicos/atendimento/contrato/physical/netsms/table/SnTipoCobrancaDSP";

declare namespace sns= "ld:br/com/netservicos/atendimento/contrato/physical/netsms/table/SnStatusContratoDSP";

declare namespace snr1= "ld:br/com/netservicos/atendimento/contrato/physical/netsms/table/SnRelStatusContratoAuxDSP";

declare namespace snr= "ld:br/com/netservicos/atendimento/contrato/physical/netsms/table/SnRelAssinanteSegmentacaoDSP";

declare namespace snt= "ld:br/com/netservicos/atendimento/contrato/physical/netsms/table/SnTipoSegmentoDSP";

declare namespace snc1= "ld:br/com/netservicos/atendimento/contrato/physical/netsms/table/SnCidadeOperadoraDSP";

declare namespace snd1= "ld:br/com/netservicos/atendimento/contrato/physical/netsms/table/SnDiaVcto";

declare namespace snd= "ld:br/com/netservicos/atendimento/contrato/physical/netsms/table/SnDiaVctoDSP";

declare namespace sna= "ld:br/com/netservicos/atendimento/autorizacaoproduto/physical/netsms/table/SnAssinanteDSP";

declare namespace snc= "ld:br/com/netservicos/atendimento/autorizacaoproduto/physical/netsms/table/SnContratoDSP";

declare namespace nod= "ld:br/com/netservicos/atendimento/contrato/physical/netsms/table/NodeProdutoDSP";

declare namespace snr10= "ld:br/com/netservicos/atendimento/contrato/physical/netsms/table/SnRelObjProdutoDSP";

declare namespace sns3= "ld:br/com/netservicos/atendimento/autorizacaoproduto/physical/netsms/table/SnServicoContratoDSP";

declare namespace snr9= "ld:br/com/netservicos/atendimento/autorizacaoproduto/physical/netsms/table/SnRelAtributosProdutoDSP";

import schema namespace ns1="http://www.netservicos.com.br/ContratoAssinante" at "ld:br/com/netservicos/atendimento/contrato/logical/schemas/ContratoAssinante.xsd";


declare namespace tns="ld:br/com/netservicos/atendimento/contrato/logical/entity/IdentificarContratosDSL";

(::pragma  function <f:function kind="read" visibility="public" isPrimary="true" xmlns:f="urn:annotations.ld.bea.com"/>::)

declare function tns:identificarContratoPorCodigoCliente($cidContrato as xs:string, $numContrato as xs:integer) as element(ns1:contratoAssinante)* {

for $SnContratoDSP in snc:SnContratoDSP()
where $cidContrato eq $SnContratoDSP/CID_CONTRATO
where $numContrato eq $SnContratoDSP/NUM_CONTRATO

for $SnAssinanteDSP in sna:SnAssinanteDSP()
where $SnContratoDSP/ID_ASSINANTE eq $SnAssinanteDSP/ID_ASSINANTE

for $SnRelStatusContratoAuxDSP in snr1:SnRelStatusContratoAuxDSP()
where $SnRelStatusContratoAuxDSP/NUM_CONTRATO eq $SnContratoDSP/NUM_CONTRATO
where $SnRelStatusContratoAuxDSP/CID_CONTRATO eq $SnContratoDSP/CID_CONTRATO
where $SnRelStatusContratoAuxDSP/DT_FIM eq xs:dateTime(xs:date(xs:string('2049-12-30')))

for $SnCidadeOperadoraDSP in snc1:SnCidadeOperadoraDSP()
where $SnCidadeOperadoraDSP/CID_CONTRATO eq $SnContratoDSP/CID_CONTRATO

for $SnStatusContratoDSP in sns:SnStatusContratoDSP()
where $SnRelStatusContratoAuxDSP/ID_STATUS eq $SnStatusContratoDSP/ID_STATUS_CONTRATO
where $SnStatusContratoDSP/DESCRICAO ne 'CANCELADO'

for $SnParametroDSP in snp3:SnParametroDSP()
where $SnCidadeOperadoraDSP/ID_EMPRESA eq $SnParametroDSP/ID_EMPRESA
where $SnParametroDSP/NOME_PARAMETRO eq fn:data('PRAZO_INADIMPLENCIA')

for $SnParametroDSP2 in snp3:SnParametroDSP()
where $SnCidadeOperadoraDSP/ID_EMPRESA eq $SnParametroDSP2/ID_EMPRESA
where $SnParametroDSP2/NOME_PARAMETRO eq fn:data('CONV_SOA_CUSTOMER')

return

	let $segmentos := tns:obterSegmentoNegocio($SnContratoDSP/NUM_CONTRATO,$SnContratoDSP/CID_CONTRATO)
	let $segmentoContrato := tns:getSegmentacaoContrato($SnContratoDSP/NUM_CONTRATO,$SnContratoDSP/CID_CONTRATO)
	let $perfilContrato := tns:getTipoPerfil($SnContratoDSP/NUM_CONTRATO,$SnContratoDSP/CID_CONTRATO)

	let $enderecos := tns:getEnderecos($SnContratoDSP/NUM_CONTRATO,$SnContratoDSP/CID_CONTRATO,$SnAssinanteDSP/ID_ENDER_INSTALACAO)
	let $flagAdim := tns:getFlagAdimpelncia($SnContratoDSP/NUM_CONTRATO,$SnContratoDSP/CID_CONTRATO)
	let $tipoCobr := tns:getTipoCobranca($SnContratoDSP/ID_TIPO_COBRANCA)
	return 
        <ns1:contratoAssinante>
            <ns1:CELULA>{fn:data($enderecos/ns1:CELULA)}</ns1:CELULA>
            <ns1:COD_IMOVEL>{xs:long( fn:data($enderecos/ns1:COD_IMOVEL))}</ns1:COD_IMOVEL>
            <ns1:FLAG_NODE_SD>{fn:data($enderecos/ns1:FLAG_NODE_SD)}</ns1:FLAG_NODE_SD>
            <ns1:FLAG_PJ>{fn:data($flagAdim/ns1:FLAG_PJ)}</ns1:FLAG_PJ>
             <ns1:FLAG_VENDA_PPV_EVENTO>{ 
            
            if(data($segmentos/seg:FLAG_PAYTV_DIGITAL)eq 'S')then 
            	let $contratoCredito := tns:getContratoCredito($SnContratoDSP/NUM_CONTRATO,$SnContratoDSP/CID_CONTRATO)
            	let $creditoProduto := tns:getCreditoProduto($SnContratoDSP/NUM_CONTRATO,$SnContratoDSP/CID_CONTRATO)
            	let $contratoColetivo := tns:obterContratoColetivo($SnContratoDSP/CID_CONTRATO,$SnContratoDSP/NUM_CONTRATO,$SnContratoDSP/ID_TIPO_CONTRATO)
            	let $dataCompra := tns:obterUltimaDataPagamento($SnContratoDSP/CID_CONTRATO,$contratoColetivo,$SnContratoDSP/DT_CADASTRO)
            	let  $totalVenda := tns:obterTotalVenda($SnContratoDSP/CID_CONTRATO,$SnContratoDSP/NUM_CONTRATO,$dataCompra)
            	return
            		if(xs:decimal($creditoProduto + $contratoCredito - $totalVenda)>0)then
            		fn:data('S')
            		else(fn:data('N'))
            else(fn:data('N'))      
          		
          		
                  
      		}                     
            </ns1:FLAG_VENDA_PPV_EVENTO>
            <ns1:NODE>{fn:data($enderecos/ns1:NODE)}</ns1:NODE>
            <ns1:SA_CPF>{fn:data($SnAssinanteDSP/CPF)}</ns1:SA_CPF>
            <ns1:SA_E_MAIL>{fn:data($SnAssinanteDSP/E_MAIL)}</ns1:SA_E_MAIL>
            <ns1:SA_ID_ENDER_INSTALACAO>{fn:data($SnAssinanteDSP/ID_ENDER_INSTALACAO)}</ns1:SA_ID_ENDER_INSTALACAO>
            <ns1:SA_ID_TIPO_PESSOA>{fn:data($SnAssinanteDSP/ID_TIPO_PESSOA)}</ns1:SA_ID_TIPO_PESSOA>
            <ns1:SA_NOME_TITULAR>{fn:data($SnAssinanteDSP/NOME_TITULAR)}</ns1:SA_NOME_TITULAR>
            <ns1:SC_CID_CONTRATO>{fn:data($SnContratoDSP/CID_CONTRATO)}</ns1:SC_CID_CONTRATO>
            <ns1:SC_DT_CADASTRO>{fn-bea:date-from-dateTime($SnContratoDSP/DT_CADASTRO)}</ns1:SC_DT_CADASTRO>
            <ns1:SC_ID_TIPO_COBRANCA>{fn:data($SnContratoDSP/ID_TIPO_COBRANCA)}</ns1:SC_ID_TIPO_COBRANCA>
            <ns1:SC_ID_TIPO_CONTRATO>{fn:data($SnContratoDSP/ID_TIPO_CONTRATO)}</ns1:SC_ID_TIPO_CONTRATO>
            <ns1:SC_NUM_CONTRATO>{fn-bea:decimal-round(fn:data($SnContratoDSP/NUM_CONTRATO))}</ns1:SC_NUM_CONTRATO>
            <ns1:SCO_COD_OPERADORA>{fn:data($SnCidadeOperadoraDSP/COD_OPERADORA)}</ns1:SCO_COD_OPERADORA>
            <ns1:SCO_ID_EMPRESA>{fn:data($SnCidadeOperadoraDSP/ID_EMPRESA)}</ns1:SCO_ID_EMPRESA>
            <ns1:SDV_DIA>{xs:decimal(tns:getDiaVcto(fn:data($SnContratoDSP/ID_DIA_VCTO)))}</ns1:SDV_DIA>
            <ns1:SE_ID_EDIFICACAO>{fn:data($enderecos/ns1:SE_ID_EDIFICACAO)}</ns1:SE_ID_EDIFICACAO>
            <ns1:SRAP_DESCRICAO>{$perfilContrato/ns1:SRAP_DESCRICAO}</ns1:SRAP_DESCRICAO>
            <ns1:SRAS_ID_TIPO_SEGMENTO>{$segmentoContrato/ns1:SRAS_ID_TIPO_SEGMENTO}</ns1:SRAS_ID_TIPO_SEGMENTO>
            <ns1:SRCPC_ID_PERFIL_CLIENTE>{$perfilContrato/ns1:SRCPC_ID_PERFIL_CLIENTE}</ns1:SRCPC_ID_PERFIL_CLIENTE>
            <ns1:SRSCA_ID_STATUS>{fn:data($SnRelStatusContratoAuxDSP/ID_STATUS)}</ns1:SRSCA_ID_STATUS>
            <ns1:SSC_DESCRICAO>{fn:data($SnStatusContratoDSP/DESCRICAO)}</ns1:SSC_DESCRICAO>
            <ns1:STATUS_ADIMPL>{tns:flagStatusAdimplente(xs:integer(fn:data($SnContratoDSP/NUM_CONTRATO)),fn:data($SnContratoDSP/CID_CONTRATO),string(data($SnParametroDSP/VLR_PARAMETRO)))}</ns1:STATUS_ADIMPL>
            <ns1:STC_DESCRICAO>{fn:data($tipoCobr/ns1:STC_DESCRICAO)}</ns1:STC_DESCRICAO>
            <ns1:STS_DESCRICAO>{$segmentoContrato/ns1:STS_DESCRICAO}</ns1:STS_DESCRICAO>
            <ns1:DT_NASCIMENTO>{fn-bea:date-from-dateTime(fn:data($SnAssinanteDSP/DT_NASCIMENTO))}</ns1:DT_NASCIMENTO>
            <ns1:FLAG_AREA_NOW>{tns:validarFlagAreaNowEndereco($enderecos, $SnContratoDSP/CID_CONTRATO)}</ns1:FLAG_AREA_NOW> 
            <ns1:FLAG_CHIP_CLARO>{tns:buscarFlagChipClaro($SnContratoDSP/NUM_CONTRATO,$SnContratoDSP/CID_CONTRATO)}</ns1:FLAG_CHIP_CLARO>
            <ns1:FLAG_CLOUD>{tns:flagCloud($SnContratoDSP/NUM_CONTRATO,$SnContratoDSP/CID_CONTRATO)}</ns1:FLAG_CLOUD>
			<ns1:SG_NEGOCIO>
                <ns1:FLAG_NETFONE>{data($segmentos/seg:FLAG_NETFONE)}</ns1:FLAG_NETFONE>
                <ns1:FLAG_INTERNET>{data($segmentos/seg:FLAG_INTERNET)}</ns1:FLAG_INTERNET>
                <ns1:FLAG_PAYTV_ANALOGICO>{data($segmentos/seg:FLAG_PAYTV_ANALOGICO)}</ns1:FLAG_PAYTV_ANALOGICO>
                <ns1:FLAG_PAYTV_DIGITAL>{data($segmentos/seg:FLAG_PAYTV_DIGITAL)}</ns1:FLAG_PAYTV_DIGITAL>
            </ns1:SG_NEGOCIO>
			<ns1:MIGRACAO_NET_UNO>{fn:data($SnParametroDSP2/VLR_PARAMETRO)}</ns1:MIGRACAO_NET_UNO>
        </ns1:contratoAssinante>
};

(::pragma  function <f:function kind="read" visibility="public" isPrimary="false" xmlns:f="urn:annotations.ld.bea.com"/>::)

declare function tns:identificarContratoPorProtocolo($protocolo as xs:string) as element(ns1:contratoAssinante)*{
let $rownum :=
	for $SnContratoDSP in snc:SnContratoDSP()
	for $SnAssinanteDSP in sna:SnAssinanteDSP()
		where $SnAssinanteDSP/ID_ASSINANTE eq $SnContratoDSP/ID_ASSINANTE
	for $SnAtendimentoAssDSP in sna1:SnAtendimentoAssDSP()
		where $SnAtendimentoAssDSP/NUM_CONTRATO eq $SnContratoDSP/NUM_CONTRATO
		where $SnAtendimentoAssDSP/CID_CONTRATO eq $SnContratoDSP/CID_CONTRATO
	for $SnChamadaDSP in snc2:SnChamadaDSP()
		where $protocolo eq $SnChamadaDSP/ID_PROTOCOLO
		where $SnAtendimentoAssDSP/ID_CHAMADA eq $SnChamadaDSP/ID_CHAMADA
	for $SnCidadeOperadoraDSP in snc1:SnCidadeOperadoraDSP()
		where $SnCidadeOperadoraDSP/CID_CONTRATO eq $SnContratoDSP/CID_CONTRATO
	for $SnRelStatusContratoAuxDSP in snr1:SnRelStatusContratoAuxDSP()
		where $SnRelStatusContratoAuxDSP/DT_FIM eq xs:dateTime(xs:date(xs:string('2049-12-30')))
		where $SnRelStatusContratoAuxDSP/NUM_CONTRATO eq $SnContratoDSP/NUM_CONTRATO
		where $SnRelStatusContratoAuxDSP/CID_CONTRATO eq $SnContratoDSP/CID_CONTRATO
	for $SnStatusContratoDSP in sns:SnStatusContratoDSP()
		where $SnStatusContratoDSP/ID_STATUS_CONTRATO eq $SnRelStatusContratoAuxDSP/ID_STATUS
		where $SnStatusContratoDSP/DESCRICAO ne 'CANCELADO'
	for $SnParametroDSP in snp3:SnParametroDSP()
		where $SnCidadeOperadoraDSP/ID_EMPRESA eq $SnParametroDSP/ID_EMPRESA
		where $SnParametroDSP/NOME_PARAMETRO eq fn:data('PRAZO_INADIMPLENCIA')
	for $SnParametroDSP2 in snp3:SnParametroDSP()
		where $SnCidadeOperadoraDSP/ID_EMPRESA eq $SnParametroDSP2/ID_EMPRESA
		where $SnParametroDSP2/NOME_PARAMETRO eq fn:data('CONV_SOA_CUSTOMER')
	return

	let $segmentos := tns:obterSegmentoNegocio($SnContratoDSP/NUM_CONTRATO,$SnContratoDSP/CID_CONTRATO)
	let $segmentoContrato := tns:getSegmentacaoContrato($SnContratoDSP/NUM_CONTRATO,$SnContratoDSP/CID_CONTRATO)
	let $perfilContrato := tns:getTipoPerfil($SnContratoDSP/NUM_CONTRATO,$SnContratoDSP/CID_CONTRATO)

	let $enderecos := tns:getEnderecos($SnContratoDSP/NUM_CONTRATO,$SnContratoDSP/CID_CONTRATO,$SnAssinanteDSP/ID_ENDER_INSTALACAO)
	let $flagAdim := tns:getFlagAdimpelncia($SnContratoDSP/NUM_CONTRATO,$SnContratoDSP/CID_CONTRATO)
	let $tipoCobr := tns:getTipoCobranca($SnContratoDSP/ID_TIPO_COBRANCA)
	return 
        <ns1:contratoAssinante>
            <ns1:CELULA>{fn:data($enderecos/ns1:CELULA)}</ns1:CELULA>
            <ns1:COD_IMOVEL>{xs:long( fn:data($enderecos/ns1:COD_IMOVEL))}</ns1:COD_IMOVEL>
            <ns1:FLAG_NODE_SD>{fn:data($enderecos/ns1:FLAG_NODE_SD)}</ns1:FLAG_NODE_SD>
            <ns1:FLAG_PJ>{fn:data($flagAdim/ns1:FLAG_PJ)}</ns1:FLAG_PJ>
             <ns1:FLAG_VENDA_PPV_EVENTO>{ 
            
            if(data($segmentos/seg:FLAG_PAYTV_DIGITAL)eq 'S')then 
            	let $contratoCredito := tns:getContratoCredito($SnContratoDSP/NUM_CONTRATO,$SnContratoDSP/CID_CONTRATO)
            	let $creditoProduto := tns:getCreditoProduto($SnContratoDSP/NUM_CONTRATO,$SnContratoDSP/CID_CONTRATO)
            	let $contratoColetivo := tns:obterContratoColetivo($SnContratoDSP/CID_CONTRATO,$SnContratoDSP/NUM_CONTRATO,$SnContratoDSP/ID_TIPO_CONTRATO)
            	let $dataCompra := tns:obterUltimaDataPagamento($SnContratoDSP/CID_CONTRATO,$contratoColetivo,$SnContratoDSP/DT_CADASTRO)
            	let  $totalVenda := tns:obterTotalVenda($SnContratoDSP/CID_CONTRATO,$SnContratoDSP/NUM_CONTRATO,$dataCompra)
            	return
            		if(xs:decimal($creditoProduto + $contratoCredito - $totalVenda)>0)then
            		fn:data('S')
            		else(fn:data('N'))
            else(fn:data('N'))      
          		
          		
                  
      		}                     
            </ns1:FLAG_VENDA_PPV_EVENTO>
            <ns1:NODE>{fn:data($enderecos/ns1:NODE)}</ns1:NODE>
            <ns1:SA_CPF>{fn:data($SnAssinanteDSP/CPF)}</ns1:SA_CPF>
            <ns1:SA_E_MAIL>{fn:data($SnAssinanteDSP/E_MAIL)}</ns1:SA_E_MAIL>
            <ns1:SA_ID_ENDER_INSTALACAO>{fn:data($SnAssinanteDSP/ID_ENDER_INSTALACAO)}</ns1:SA_ID_ENDER_INSTALACAO>
            <ns1:SA_ID_TIPO_PESSOA>{fn:data($SnAssinanteDSP/ID_TIPO_PESSOA)}</ns1:SA_ID_TIPO_PESSOA>
            <ns1:SA_NOME_TITULAR>{fn:data($SnAssinanteDSP/NOME_TITULAR)}</ns1:SA_NOME_TITULAR>
            <ns1:SC_CID_CONTRATO>{fn:data($SnContratoDSP/CID_CONTRATO)}</ns1:SC_CID_CONTRATO>
            <ns1:SC_DT_CADASTRO>{fn-bea:date-from-dateTime($SnContratoDSP/DT_CADASTRO)}</ns1:SC_DT_CADASTRO>
            <ns1:SC_ID_TIPO_COBRANCA>{fn:data($SnContratoDSP/ID_TIPO_COBRANCA)}</ns1:SC_ID_TIPO_COBRANCA>
            <ns1:SC_ID_TIPO_CONTRATO>{fn:data($SnContratoDSP/ID_TIPO_CONTRATO)}</ns1:SC_ID_TIPO_CONTRATO>
            <ns1:SC_NUM_CONTRATO>{fn-bea:decimal-round(fn:data($SnContratoDSP/NUM_CONTRATO))}</ns1:SC_NUM_CONTRATO>
            <ns1:SCO_COD_OPERADORA>{fn:data($SnCidadeOperadoraDSP/COD_OPERADORA)}</ns1:SCO_COD_OPERADORA>
            <ns1:SCO_ID_EMPRESA>{fn:data($SnCidadeOperadoraDSP/ID_EMPRESA)}</ns1:SCO_ID_EMPRESA>
            <ns1:SDV_DIA>{xs:decimal(tns:getDiaVcto(fn:data($SnContratoDSP/ID_DIA_VCTO)))}</ns1:SDV_DIA>
            <ns1:SE_ID_EDIFICACAO>{fn:data($enderecos/ns1:SE_ID_EDIFICACAO)}</ns1:SE_ID_EDIFICACAO>
            <ns1:SRAP_DESCRICAO>{$perfilContrato/ns1:SRAP_DESCRICAO}</ns1:SRAP_DESCRICAO>
            <ns1:SRAS_ID_TIPO_SEGMENTO>{$segmentoContrato/ns1:SRAS_ID_TIPO_SEGMENTO}</ns1:SRAS_ID_TIPO_SEGMENTO>
            <ns1:SRCPC_ID_PERFIL_CLIENTE>{$perfilContrato/ns1:SRCPC_ID_PERFIL_CLIENTE}</ns1:SRCPC_ID_PERFIL_CLIENTE>
            <ns1:SRSCA_ID_STATUS>{fn:data($SnRelStatusContratoAuxDSP/ID_STATUS)}</ns1:SRSCA_ID_STATUS>
            <ns1:SSC_DESCRICAO>{fn:data($SnStatusContratoDSP/DESCRICAO)}</ns1:SSC_DESCRICAO>
            <ns1:STATUS_ADIMPL>{tns:flagStatusAdimplente(xs:integer(fn:data($SnContratoDSP/NUM_CONTRATO)),fn:data($SnContratoDSP/CID_CONTRATO),string(data($SnParametroDSP/VLR_PARAMETRO)))}</ns1:STATUS_ADIMPL>
            <ns1:STC_DESCRICAO>{fn:data($tipoCobr/ns1:STC_DESCRICAO)}</ns1:STC_DESCRICAO>
            <ns1:STS_DESCRICAO>{$segmentoContrato/ns1:STS_DESCRICAO}</ns1:STS_DESCRICAO>
            <ns1:DT_NASCIMENTO>{fn-bea:date-from-dateTime(fn:data($SnAssinanteDSP/DT_NASCIMENTO))}</ns1:DT_NASCIMENTO>
			<ns1:FLAG_AREA_NOW>{tns:validarFlagAreaNowEndereco($enderecos, $SnContratoDSP/CID_CONTRATO)}</ns1:FLAG_AREA_NOW> 
			<ns1:FLAG_CHIP_CLARO>{tns:buscarFlagChipClaro($SnContratoDSP/NUM_CONTRATO,$SnContratoDSP/CID_CONTRATO)}</ns1:FLAG_CHIP_CLARO>
            <ns1:FLAG_CLOUD>{tns:flagCloud($SnContratoDSP/NUM_CONTRATO,$SnContratoDSP/CID_CONTRATO)}</ns1:FLAG_CLOUD>
			<ns1:SG_NEGOCIO>
                <ns1:FLAG_NETFONE>{data($segmentos/seg:FLAG_NETFONE)}</ns1:FLAG_NETFONE>
                <ns1:FLAG_INTERNET>{data($segmentos/seg:FLAG_INTERNET)}</ns1:FLAG_INTERNET>
                <ns1:FLAG_PAYTV_ANALOGICO>{data($segmentos/seg:FLAG_PAYTV_ANALOGICO)}</ns1:FLAG_PAYTV_ANALOGICO>
                <ns1:FLAG_PAYTV_DIGITAL>{data($segmentos/seg:FLAG_PAYTV_DIGITAL)}</ns1:FLAG_PAYTV_DIGITAL>
            </ns1:SG_NEGOCIO>
			<ns1:MIGRACAO_NET_UNO>{fn:data($SnParametroDSP2/VLR_PARAMETRO)}</ns1:MIGRACAO_NET_UNO>
        </ns1:contratoAssinante>
    return
   		for $primeiroContrato in subsequence($rownum, 1, 1)
			return $primeiroContrato

};

(::pragma  function <f:function kind="read" visibility="public" isPrimary="false" xmlns:f="urn:annotations.ld.bea.com"/>::)

declare function tns:identificarContratosPorDocumento($documento as xs:string) as element(ns1:contratoAssinante)*{
for $SnAssinanteDSP in sna:SnAssinanteDSP()
where $documento eq $SnAssinanteDSP/CPF

for $SnContratoDSP in snc:SnContratoDSP()
where $SnContratoDSP/ID_ASSINANTE eq $SnAssinanteDSP/ID_ASSINANTE



for $SnRelStatusContratoAuxDSP in snr1:SnRelStatusContratoAuxDSP()
where $SnRelStatusContratoAuxDSP/NUM_CONTRATO eq $SnContratoDSP/NUM_CONTRATO
where $SnRelStatusContratoAuxDSP/CID_CONTRATO eq $SnContratoDSP/CID_CONTRATO
where $SnRelStatusContratoAuxDSP/DT_FIM eq xs:dateTime(xs:date(xs:string('2049-12-30')))

for $SnCidadeOperadoraDSP in snc1:SnCidadeOperadoraDSP()
where $SnCidadeOperadoraDSP/CID_CONTRATO eq $SnContratoDSP/CID_CONTRATO

for $SnStatusContratoDSP in sns:SnStatusContratoDSP()
where $SnRelStatusContratoAuxDSP/ID_STATUS eq $SnStatusContratoDSP/ID_STATUS_CONTRATO
where $SnStatusContratoDSP/DESCRICAO ne 'CANCELADO'

for $SnParametroDSP in snp3:SnParametroDSP()
where $SnCidadeOperadoraDSP/ID_EMPRESA eq $SnParametroDSP/ID_EMPRESA
where $SnParametroDSP/NOME_PARAMETRO eq fn:data('PRAZO_INADIMPLENCIA')

for $SnParametroDSP2 in snp3:SnParametroDSP()
where $SnCidadeOperadoraDSP/ID_EMPRESA eq $SnParametroDSP2/ID_EMPRESA
where $SnParametroDSP2/NOME_PARAMETRO eq fn:data('CONV_SOA_CUSTOMER')
		
return

	let $segmentos := tns:obterSegmentoNegocio($SnContratoDSP/NUM_CONTRATO,$SnContratoDSP/CID_CONTRATO)
	let $segmentoContrato := tns:getSegmentacaoContrato($SnContratoDSP/NUM_CONTRATO,$SnContratoDSP/CID_CONTRATO)
	let $perfilContrato := tns:getTipoPerfil($SnContratoDSP/NUM_CONTRATO,$SnContratoDSP/CID_CONTRATO)

	let $enderecos := tns:getEnderecos($SnContratoDSP/NUM_CONTRATO,$SnContratoDSP/CID_CONTRATO,$SnAssinanteDSP/ID_ENDER_INSTALACAO)
	let $flagAdim := tns:getFlagAdimpelncia($SnContratoDSP/NUM_CONTRATO,$SnContratoDSP/CID_CONTRATO)
	let $tipoCobr := tns:getTipoCobranca($SnContratoDSP/ID_TIPO_COBRANCA)
	return 
        <ns1:contratoAssinante>
            <ns1:CELULA>{fn:data($enderecos/ns1:CELULA)}</ns1:CELULA>
            <ns1:COD_IMOVEL>{xs:long( fn:data($enderecos/ns1:COD_IMOVEL))}</ns1:COD_IMOVEL>
            <ns1:FLAG_NODE_SD>{fn:data($enderecos/ns1:FLAG_NODE_SD)}</ns1:FLAG_NODE_SD>
            <ns1:FLAG_PJ>{fn:data($flagAdim/ns1:FLAG_PJ)}</ns1:FLAG_PJ>
             <ns1:FLAG_VENDA_PPV_EVENTO>{ 
            
            if(data($segmentos/seg:FLAG_PAYTV_DIGITAL)eq 'S')then 
            	let $contratoCredito := tns:getContratoCredito($SnContratoDSP/NUM_CONTRATO,$SnContratoDSP/CID_CONTRATO)
            	let $creditoProduto := tns:getCreditoProduto($SnContratoDSP/NUM_CONTRATO,$SnContratoDSP/CID_CONTRATO)
            	let $contratoColetivo := tns:obterContratoColetivo($SnContratoDSP/CID_CONTRATO,$SnContratoDSP/NUM_CONTRATO,$SnContratoDSP/ID_TIPO_CONTRATO)
            	let $dataCompra := tns:obterUltimaDataPagamento($SnContratoDSP/CID_CONTRATO,$contratoColetivo,$SnContratoDSP/DT_CADASTRO)
            	let  $totalVenda := tns:obterTotalVenda($SnContratoDSP/CID_CONTRATO,$SnContratoDSP/NUM_CONTRATO,$dataCompra)
            	return
            		if(xs:decimal($creditoProduto + $contratoCredito - $totalVenda)>0)then
            		fn:data('S')
            		else(fn:data('N'))
            else(fn:data('N'))      
          		
          		
                  
      		}                     
            </ns1:FLAG_VENDA_PPV_EVENTO>
            <ns1:NODE>{fn:data($enderecos/ns1:NODE)}</ns1:NODE>
            <ns1:SA_CPF>{fn:data($SnAssinanteDSP/CPF)}</ns1:SA_CPF>
            <ns1:SA_E_MAIL>{fn:data($SnAssinanteDSP/E_MAIL)}</ns1:SA_E_MAIL>
            <ns1:SA_ID_ENDER_INSTALACAO>{fn:data($SnAssinanteDSP/ID_ENDER_INSTALACAO)}</ns1:SA_ID_ENDER_INSTALACAO>
            <ns1:SA_ID_TIPO_PESSOA>{fn:data($SnAssinanteDSP/ID_TIPO_PESSOA)}</ns1:SA_ID_TIPO_PESSOA>
            <ns1:SA_NOME_TITULAR>{fn:data($SnAssinanteDSP/NOME_TITULAR)}</ns1:SA_NOME_TITULAR>
            <ns1:SC_CID_CONTRATO>{fn:data($SnContratoDSP/CID_CONTRATO)}</ns1:SC_CID_CONTRATO>
            <ns1:SC_DT_CADASTRO>{fn-bea:date-from-dateTime($SnContratoDSP/DT_CADASTRO)}</ns1:SC_DT_CADASTRO>
            <ns1:SC_ID_TIPO_COBRANCA>{fn:data($SnContratoDSP/ID_TIPO_COBRANCA)}</ns1:SC_ID_TIPO_COBRANCA>
            <ns1:SC_ID_TIPO_CONTRATO>{fn:data($SnContratoDSP/ID_TIPO_CONTRATO)}</ns1:SC_ID_TIPO_CONTRATO>
            <ns1:SC_NUM_CONTRATO>{fn-bea:decimal-round(fn:data($SnContratoDSP/NUM_CONTRATO))}</ns1:SC_NUM_CONTRATO>
            <ns1:SCO_COD_OPERADORA>{fn:data($SnCidadeOperadoraDSP/COD_OPERADORA)}</ns1:SCO_COD_OPERADORA>
            <ns1:SCO_ID_EMPRESA>{fn:data($SnCidadeOperadoraDSP/ID_EMPRESA)}</ns1:SCO_ID_EMPRESA>
            <ns1:SDV_DIA>{xs:decimal(tns:getDiaVcto(fn:data($SnContratoDSP/ID_DIA_VCTO)))}</ns1:SDV_DIA>
            <ns1:SE_ID_EDIFICACAO>{fn:data($enderecos/ns1:SE_ID_EDIFICACAO)}</ns1:SE_ID_EDIFICACAO>
            <ns1:SRAP_DESCRICAO>{$perfilContrato/ns1:SRAP_DESCRICAO}</ns1:SRAP_DESCRICAO>
            <ns1:SRAS_ID_TIPO_SEGMENTO>{$segmentoContrato/ns1:SRAS_ID_TIPO_SEGMENTO}</ns1:SRAS_ID_TIPO_SEGMENTO>
            <ns1:SRCPC_ID_PERFIL_CLIENTE>{$perfilContrato/ns1:SRCPC_ID_PERFIL_CLIENTE}</ns1:SRCPC_ID_PERFIL_CLIENTE>
            <ns1:SRSCA_ID_STATUS>{fn:data($SnRelStatusContratoAuxDSP/ID_STATUS)}</ns1:SRSCA_ID_STATUS>
            <ns1:SSC_DESCRICAO>{fn:data($SnStatusContratoDSP/DESCRICAO)}</ns1:SSC_DESCRICAO>
            <ns1:STATUS_ADIMPL>{tns:flagStatusAdimplente(xs:integer(fn:data($SnContratoDSP/NUM_CONTRATO)),fn:data($SnContratoDSP/CID_CONTRATO),string(data($SnParametroDSP/VLR_PARAMETRO)))}</ns1:STATUS_ADIMPL>
            <ns1:STC_DESCRICAO>{fn:data($tipoCobr/ns1:STC_DESCRICAO)}</ns1:STC_DESCRICAO>
            <ns1:STS_DESCRICAO>{$segmentoContrato/ns1:STS_DESCRICAO}</ns1:STS_DESCRICAO>
            <ns1:DT_NASCIMENTO>{fn-bea:date-from-dateTime(fn:data($SnAssinanteDSP/DT_NASCIMENTO))}</ns1:DT_NASCIMENTO>
			<ns1:FLAG_AREA_NOW>{tns:validarFlagAreaNowEndereco($enderecos, $SnContratoDSP/CID_CONTRATO)}</ns1:FLAG_AREA_NOW>  
            <ns1:FLAG_CHIP_CLARO>{tns:buscarFlagChipClaro($SnContratoDSP/NUM_CONTRATO,$SnContratoDSP/CID_CONTRATO)}</ns1:FLAG_CHIP_CLARO>
            <ns1:FLAG_CLOUD>{tns:flagCloud($SnContratoDSP/NUM_CONTRATO,$SnContratoDSP/CID_CONTRATO)}</ns1:FLAG_CLOUD>
			<ns1:SG_NEGOCIO>
                <ns1:FLAG_NETFONE>{data($segmentos/seg:FLAG_NETFONE)}</ns1:FLAG_NETFONE>
                <ns1:FLAG_INTERNET>{data($segmentos/seg:FLAG_INTERNET)}</ns1:FLAG_INTERNET>
                <ns1:FLAG_PAYTV_ANALOGICO>{data($segmentos/seg:FLAG_PAYTV_ANALOGICO)}</ns1:FLAG_PAYTV_ANALOGICO>
                <ns1:FLAG_PAYTV_DIGITAL>{data($segmentos/seg:FLAG_PAYTV_DIGITAL)}</ns1:FLAG_PAYTV_DIGITAL>
            </ns1:SG_NEGOCIO>
			<ns1:MIGRACAO_NET_UNO>{fn:data($SnParametroDSP2/VLR_PARAMETRO)}</ns1:MIGRACAO_NET_UNO>
        </ns1:contratoAssinante>
    

};

(::pragma  function <f:function kind="read" visibility="public" isPrimary="false" xmlns:f="urn:annotations.ld.bea.com"/>::)

declare function tns:identificarContratosPorTelefone($telefone as xs:string) as element(ns1:contratoAssinante)*{

let $contratoNETFone := tns:consultarContratoPorNETFone($telefone)
let $contratoNaoNetFone := tns:consultarContratoPorTelefone($telefone)

return
	    if (not(fn:empty($contratoNaoNetFone)) and not(fn:empty($contratoNETFone))) then 
	   		$contratoNaoNetFone union $contratoNETFone
	   	else if (not(fn:empty($contratoNaoNetFone)))then
	    	$contratoNaoNetFone
	    else if (not(fn:empty($contratoNETFone)))then
	    	$contratoNETFone
	    else()
    
        
};
(::pragma  function <f:function kind="library" visibility="private" isPrimary="false" xmlns:f="urn:annotations.ld.bea.com"/>::)

declare function tns:obterSegmentoNegocio($numeroContrato as xs:integer, $cidadeContrato as xs:string) as element(seg:SegmentoNegocio)* { 
	if(not(empty($numeroContrato)) and not(empty($cidadeContrato)))then
		let $result :=
			for $SnContratoDSP in snc:SnContratoDSP()
				where $cidadeContrato eq $SnContratoDSP/CID_CONTRATO
				where $numeroContrato eq $SnContratoDSP/NUM_CONTRATO
			for $SnRelPontoProdutoDSP in snr5:SnRelPontoProdutoDSP()
				where $SnRelPontoProdutoDSP/NUM_CONTRATO eq $SnContratoDSP/NUM_CONTRATO
				where $SnRelPontoProdutoDSP/CID_CONTRATO eq $SnContratoDSP/CID_CONTRATO
				where $SnRelPontoProdutoDSP/DT_FIM eq xs:dateTime(xs:date(xs:string('2049-12-30')))
				where $SnRelPontoProdutoDSP/INSTALADO eq xs:integer ('1')
		
			for $SnProdutoDSP in snp2:SnProdutoDSP()
				where $SnProdutoDSP/ID_PRODUTO eq $SnRelPontoProdutoDSP/ID_PRODUTO
				where $SnProdutoDSP/ID_TIPO_PRODUTO eq xs:integer ('1')
			for $SnCaracteristicaDSP in snc5:SnCaracteristicaDSP()
				where $SnCaracteristicaDSP/ID_CARACTERISTICA eq $SnProdutoDSP/ID_CARACTERISTICA
			for $SoSegmentoNegociosDSP in sos:SoSegmentoNegociosDSP()
				where $SnCaracteristicaDSP/ID_SEGMENTO_NEGOCIOS eq $SoSegmentoNegociosDSP/ID_SEGMENTO_NEGOCIOS
		
		return      
		    <seg:SegmentoNegocio>
		    {
		      if($SoSegmentoNegociosDSP/ID_SEGMENTO_NEGOCIOS eq xs:integer('4'))then
		              <seg:FLAG_NETFONE>{data($SoSegmentoNegociosDSP/ID_SEGMENTO_NEGOCIOS)}</seg:FLAG_NETFONE>
		        else if($SoSegmentoNegociosDSP/ID_SEGMENTO_NEGOCIOS eq xs:integer('2'))then
		            <seg:FLAG_INTERNET>{data($SoSegmentoNegociosDSP/ID_SEGMENTO_NEGOCIOS)}</seg:FLAG_INTERNET>
		        else if($SoSegmentoNegociosDSP/ID_SEGMENTO_NEGOCIOS eq xs:integer('1'))then
		        	<seg:FLAG_PAYTV_ANALOGICO>{data($SoSegmentoNegociosDSP/ID_SEGMENTO_NEGOCIOS)}</seg:FLAG_PAYTV_ANALOGICO>
		        else if($SoSegmentoNegociosDSP/ID_SEGMENTO_NEGOCIOS eq xs:integer('3'))then
		        	<seg:FLAG_PAYTV_DIGITAL>{data($SoSegmentoNegociosDSP/ID_SEGMENTO_NEGOCIOS)}</seg:FLAG_PAYTV_DIGITAL>
		        else()
		    }
		    </seg:SegmentoNegocio>
		return  
		<seg:SegmentoNegocio> 
		{
		if(exists($result/seg:FLAG_NETFONE))then
		      <seg:FLAG_NETFONE>{data('S')}</seg:FLAG_NETFONE>
		else(<seg:FLAG_NETFONE>{data('N')}</seg:FLAG_NETFONE>)
		}
		
		{
		if(exists($result/seg:FLAG_INTERNET))then
		      <seg:FLAG_INTERNET>{data('S')}</seg:FLAG_INTERNET>
		else(<seg:FLAG_INTERNET>{data('N')}</seg:FLAG_INTERNET>)
		}
		
		{
		if(exists($result/seg:FLAG_PAYTV_ANALOGICO))then
		      <seg:FLAG_PAYTV_ANALOGICO>{data('S')}</seg:FLAG_PAYTV_ANALOGICO>
		else(<seg:FLAG_PAYTV_ANALOGICO>{data('N')}</seg:FLAG_PAYTV_ANALOGICO>)
		}
		
		{
		if(exists($result/seg:FLAG_PAYTV_DIGITAL))then
		      <seg:FLAG_PAYTV_DIGITAL>{data('S')}</seg:FLAG_PAYTV_DIGITAL>
		else(<seg:FLAG_PAYTV_DIGITAL>{data('N')}</seg:FLAG_PAYTV_DIGITAL>)
		}
		</seg:SegmentoNegocio> 
	else()              
};

(::pragma  function <f:function kind="library" visibility="private" isPrimary="false" xmlns:f="urn:annotations.ld.bea.com"/>::)

declare function tns:flagStatusAdimplente($num_contrato as xs:integer, $cid_contrato as xs:string, $dias as xs:string) as xs:string {
	if(not(empty($num_contrato)) and not(empty($cid_contrato)) and not(empty($dias)))then
		let $retorno := for $SnCobrancaDSP in snc6:SnCobrancaDSP()
		where $num_contrato eq $SnCobrancaDSP/NUM_CONTRATO
		where $cid_contrato eq $SnCobrancaDSP/CID_CONTRATO
		where $SnCobrancaDSP/ID_SIT_COBRANCA eq xs:integer('10')
		where $SnCobrancaDSP/DT_VENCTO lt fn:current-dateTime() - xdt:dayTimeDuration(concat("P",$dias,"D"))
		return
		
		$SnCobrancaDSP/DT_VENCTO
		return 
		if(empty($retorno))then string('ADIMPLENTE')else(string('INADIMPLENTE'))
	else(string('ADIMPLENTE'))
};

(:Função responsavel por retirar caracter " -()" da string que contem um telefeno. O retorno desta função é o DDD com 2 digitos. Vericação 
se o telefone possui 8 ou 9 digitos, se a string começar com 0 quer disser que o telefone tem 8 digitos, caso contrario tem 9 digitos:)
declare function tns:obtemDDD($telefone as xs:string) as xs:string{
	let $DDD := fn:translate(fn:data($telefone), " -()", "")
	return
		if(fn:string-length($DDD) >= 10) then
			if(fn:substring(fn:data($DDD), 1, 1) eq "0")then
				fn:substring(fn:data($DDD), 2, 2)
			else		
				fn:substring(fn:data($DDD), 1, 2)
		else
			"00"
};

(:Função responsavel por retirar caracter " -()" da string que contem um telefeno. O retorno desta função é o DDD com 2 digitos. Vericação 
se o telefone possui 8 ou 9 digitos, se a string começar com 0 quer disser que o telefone tem 8 digitos, caso contrario tem 9 digitos:)
declare function tns:obtemTelefone($telefone as xs:string) as xs:string{
	let $tel := fn:replace(fn:data($telefone), "[^0-9]", "")
	return
		if(fn:string-length($tel) eq 10) then
			fn:substring(fn:data($tel),3,8)
		else if(fn:string-length($tel) eq 11) then
			fn:substring(fn:data($tel),3,9)
		else if(fn:string-length($tel) > 11) then
			if(fn:substring(fn:data($tel),1,1)eq "0")then
				fn:substring(fn:data($tel),4)
			else
				fn:substring(fn:data($tel),3)
	else
		"00000000"
};

(::pragma  function <f:function kind="library" visibility="private" isPrimary="false" xmlns:f="urn:annotations.ld.bea.com"/>::)

declare function tns:consultarContratoPorNETFone($telefone as xs:string) as element(ns1:contratoAssinante)*{
if(not(empty($telefone)))then
   for $SnTelefoneVoipDSP in snt2:SnTelefoneVoipDSP()
   for $SnContratoDSP in snc:SnContratoDSP()
		where $SnTelefoneVoipDSP/DT_FIM eq xs:dateTime(xs:date(xs:string('2049-12-30')))    
		where $SnTelefoneVoipDSP/ID_STATUS_TELEFONE_VOIP eq fn:data('U')
		where tns:obtemDDD($telefone) eq $SnTelefoneVoipDSP/DDD_TELEFONE_VOIP
		where tns:obtemTelefone($telefone) eq $SnTelefoneVoipDSP/NUM_TELEFONE_VOIP
		where $SnTelefoneVoipDSP/NUM_CONTRATO eq $SnContratoDSP/NUM_CONTRATO
		where $SnTelefoneVoipDSP/CID_CONTRATO eq $SnContratoDSP/CID_CONTRATO
	for $SnAssinanteDSP in sna:SnAssinanteDSP()
		where $SnContratoDSP/ID_ASSINANTE eq $SnAssinanteDSP/ID_ASSINANTE
				
	for $SnRelStatusContratoAuxDSP in snr1:SnRelStatusContratoAuxDSP()
		where $SnRelStatusContratoAuxDSP/NUM_CONTRATO eq $SnContratoDSP/NUM_CONTRATO
		where $SnRelStatusContratoAuxDSP/CID_CONTRATO eq $SnContratoDSP/CID_CONTRATO
		where $SnRelStatusContratoAuxDSP/DT_FIM eq xs:dateTime(xs:date(xs:string('2049-12-30')))
	for $SnCidadeOperadoraDSP in snc1:SnCidadeOperadoraDSP()
		where $SnCidadeOperadoraDSP/CID_CONTRATO eq $SnContratoDSP/CID_CONTRATO
	for $SnStatusContratoDSP in sns:SnStatusContratoDSP()
		where $SnRelStatusContratoAuxDSP/ID_STATUS eq $SnStatusContratoDSP/ID_STATUS_CONTRATO
		where $SnStatusContratoDSP/DESCRICAO ne 'CANCELADO'
	for $SnParametroDSP in snp3:SnParametroDSP()
		where $SnCidadeOperadoraDSP/ID_EMPRESA eq $SnParametroDSP/ID_EMPRESA
		where $SnParametroDSP/NOME_PARAMETRO eq fn:data('PRAZO_INADIMPLENCIA')
	for $SnParametroDSP2 in snp3:SnParametroDSP()
		where $SnCidadeOperadoraDSP/ID_EMPRESA eq $SnParametroDSP2/ID_EMPRESA
		where $SnParametroDSP2/NOME_PARAMETRO eq fn:data('CONV_SOA_CUSTOMER')
	return
		let $segmentos := tns:obterSegmentoNegocio($SnContratoDSP/NUM_CONTRATO,$SnContratoDSP/CID_CONTRATO)
		let $segmentoContrato := tns:getSegmentacaoContrato($SnContratoDSP/NUM_CONTRATO,$SnContratoDSP/CID_CONTRATO)
		let $perfilContrato := tns:getTipoPerfil($SnContratoDSP/NUM_CONTRATO,$SnContratoDSP/CID_CONTRATO)
		let $enderecos := tns:getEnderecos($SnContratoDSP/NUM_CONTRATO,$SnContratoDSP/CID_CONTRATO,$SnAssinanteDSP/ID_ENDER_INSTALACAO)
		let $flagAdim := tns:getFlagAdimpelncia($SnContratoDSP/NUM_CONTRATO,$SnContratoDSP/CID_CONTRATO)
		let $tipoCobr := tns:getTipoCobranca($SnContratoDSP/ID_TIPO_COBRANCA)
		return 
        	<ns1:contratoAssinante>
            	<ns1:CELULA>{fn:data($enderecos/ns1:CELULA)}</ns1:CELULA>
            	<ns1:COD_IMOVEL>{xs:long( fn:data($enderecos/ns1:COD_IMOVEL))}</ns1:COD_IMOVEL>
            	<ns1:FLAG_NODE_SD>{fn:data($enderecos/ns1:FLAG_NODE_SD)}</ns1:FLAG_NODE_SD>
            	<ns1:FLAG_PJ>{fn:data($flagAdim/ns1:FLAG_PJ)}</ns1:FLAG_PJ>
             	<ns1:FLAG_VENDA_PPV_EVENTO>{ 
            
            	if(data($segmentos/seg:FLAG_PAYTV_DIGITAL)eq 'S')then 
            		let $contratoCredito := tns:getContratoCredito($SnContratoDSP/NUM_CONTRATO,$SnContratoDSP/CID_CONTRATO)
            		let $creditoProduto := tns:getCreditoProduto($SnContratoDSP/NUM_CONTRATO,$SnContratoDSP/CID_CONTRATO)
            		let $contratoColetivo := tns:obterContratoColetivo($SnContratoDSP/CID_CONTRATO,$SnContratoDSP/NUM_CONTRATO,$SnContratoDSP/ID_TIPO_CONTRATO)
            		let $dataCompra := tns:obterUltimaDataPagamento($SnContratoDSP/CID_CONTRATO,$contratoColetivo,$SnContratoDSP/DT_CADASTRO)
            		let  $totalVenda := tns:obterTotalVenda($SnContratoDSP/CID_CONTRATO,$SnContratoDSP/NUM_CONTRATO,$dataCompra)
            		return
            			if(xs:decimal($creditoProduto + $contratoCredito - $totalVenda)>0)then
            				fn:data('S')
            			else(fn:data('N'))
           		else(fn:data('N'))                     
      		}                     
            </ns1:FLAG_VENDA_PPV_EVENTO>
            <ns1:NODE>{fn:data($enderecos/ns1:NODE)}</ns1:NODE>
            <ns1:SA_CPF>{fn:data($SnAssinanteDSP/CPF)}</ns1:SA_CPF>
            <ns1:SA_E_MAIL>{fn:data($SnAssinanteDSP/E_MAIL)}</ns1:SA_E_MAIL>
            <ns1:SA_ID_ENDER_INSTALACAO>{fn:data($SnAssinanteDSP/ID_ENDER_INSTALACAO)}</ns1:SA_ID_ENDER_INSTALACAO>
            <ns1:SA_ID_TIPO_PESSOA>{fn:data($SnAssinanteDSP/ID_TIPO_PESSOA)}</ns1:SA_ID_TIPO_PESSOA>
            <ns1:SA_NOME_TITULAR>{fn:data($SnAssinanteDSP/NOME_TITULAR)}</ns1:SA_NOME_TITULAR>
            <ns1:SC_CID_CONTRATO>{fn:data($SnContratoDSP/CID_CONTRATO)}</ns1:SC_CID_CONTRATO>
            <ns1:SC_DT_CADASTRO>{fn-bea:date-from-dateTime($SnContratoDSP/DT_CADASTRO)}</ns1:SC_DT_CADASTRO>
            <ns1:SC_ID_TIPO_COBRANCA>{fn:data($SnContratoDSP/ID_TIPO_COBRANCA)}</ns1:SC_ID_TIPO_COBRANCA>
            <ns1:SC_ID_TIPO_CONTRATO>{fn:data($SnContratoDSP/ID_TIPO_CONTRATO)}</ns1:SC_ID_TIPO_CONTRATO>
            <ns1:SC_NUM_CONTRATO>{fn-bea:decimal-round(fn:data($SnContratoDSP/NUM_CONTRATO))}</ns1:SC_NUM_CONTRATO>
            <ns1:SCO_COD_OPERADORA>{fn:data($SnCidadeOperadoraDSP/COD_OPERADORA)}</ns1:SCO_COD_OPERADORA>
            <ns1:SCO_ID_EMPRESA>{fn:data($SnCidadeOperadoraDSP/ID_EMPRESA)}</ns1:SCO_ID_EMPRESA>
            <ns1:SDV_DIA>{xs:decimal(tns:getDiaVcto(fn:data($SnContratoDSP/ID_DIA_VCTO)))}</ns1:SDV_DIA>
            <ns1:SE_ID_EDIFICACAO>{fn:data($enderecos/ns1:SE_ID_EDIFICACAO)}</ns1:SE_ID_EDIFICACAO>
            <ns1:SRAP_DESCRICAO>{$perfilContrato/ns1:SRAP_DESCRICAO}</ns1:SRAP_DESCRICAO>
            <ns1:SRAS_ID_TIPO_SEGMENTO>{$segmentoContrato/ns1:SRAS_ID_TIPO_SEGMENTO}</ns1:SRAS_ID_TIPO_SEGMENTO>
            <ns1:SRCPC_ID_PERFIL_CLIENTE>{$perfilContrato/ns1:SRCPC_ID_PERFIL_CLIENTE}</ns1:SRCPC_ID_PERFIL_CLIENTE>
            <ns1:SRSCA_ID_STATUS>{fn:data($SnRelStatusContratoAuxDSP/ID_STATUS)}</ns1:SRSCA_ID_STATUS>
            <ns1:SSC_DESCRICAO>{fn:data($SnStatusContratoDSP/DESCRICAO)}</ns1:SSC_DESCRICAO>
            <ns1:STATUS_ADIMPL>{tns:flagStatusAdimplente(xs:integer(fn:data($SnContratoDSP/NUM_CONTRATO)),fn:data($SnContratoDSP/CID_CONTRATO),string(data($SnParametroDSP/VLR_PARAMETRO)))}</ns1:STATUS_ADIMPL>
            <ns1:STC_DESCRICAO>{fn:data($tipoCobr/ns1:STC_DESCRICAO)}</ns1:STC_DESCRICAO>
            <ns1:STS_DESCRICAO>{$segmentoContrato/ns1:STS_DESCRICAO}</ns1:STS_DESCRICAO>
            <ns1:DT_NASCIMENTO>{fn-bea:date-from-dateTime(fn:data($SnAssinanteDSP/DT_NASCIMENTO))}</ns1:DT_NASCIMENTO>
			<ns1:FLAG_AREA_NOW>{tns:validarFlagAreaNowEndereco($enderecos, $SnContratoDSP/CID_CONTRATO)}</ns1:FLAG_AREA_NOW>            
			<ns1:FLAG_CHIP_CLARO>{tns:buscarFlagChipClaro($SnContratoDSP/NUM_CONTRATO,$SnContratoDSP/CID_CONTRATO)}</ns1:FLAG_CHIP_CLARO>
            <ns1:FLAG_CLOUD>{tns:flagCloud($SnContratoDSP/NUM_CONTRATO,$SnContratoDSP/CID_CONTRATO)}</ns1:FLAG_CLOUD>
            
			<ns1:SG_NEGOCIO>
                <ns1:FLAG_NETFONE>{data($segmentos/seg:FLAG_NETFONE)}</ns1:FLAG_NETFONE>
                <ns1:FLAG_INTERNET>{data($segmentos/seg:FLAG_INTERNET)}</ns1:FLAG_INTERNET>
                <ns1:FLAG_PAYTV_ANALOGICO>{data($segmentos/seg:FLAG_PAYTV_ANALOGICO)}</ns1:FLAG_PAYTV_ANALOGICO>
                <ns1:FLAG_PAYTV_DIGITAL>{data($segmentos/seg:FLAG_PAYTV_DIGITAL)}</ns1:FLAG_PAYTV_DIGITAL>
            </ns1:SG_NEGOCIO>
			<ns1:MIGRACAO_NET_UNO>{fn:data($SnParametroDSP2/VLR_PARAMETRO)}</ns1:MIGRACAO_NET_UNO>
        </ns1:contratoAssinante>
	else()
};

(::pragma  function <f:function kind="library" visibility="private" isPrimary="false" xmlns:f="urn:annotations.ld.bea.com"/>::)

declare function tns:consultarContratoPorTelefone($telefone as xs:string) as element(ns1:contratoAssinante)*{
 if(not(empty($telefone)))then
 	for $SnAssinanteDSP in sna:SnAssinanteDSP()
	for $SnContratoDSP in snc:SnContratoDSP()
	where $SnContratoDSP/ID_ASSINANTE eq $SnAssinanteDSP/ID_ASSINANTE
	where ($SnAssinanteDSP/TEL_RES eq $telefone
		or $SnAssinanteDSP/TEL_COM eq $telefone
		or $SnAssinanteDSP/CC_TEL_CEL eq $telefone)
	for $SnRelStatusContratoAuxDSP in snr1:SnRelStatusContratoAuxDSP()
		where $SnRelStatusContratoAuxDSP/NUM_CONTRATO eq $SnContratoDSP/NUM_CONTRATO
		where $SnRelStatusContratoAuxDSP/CID_CONTRATO eq $SnContratoDSP/CID_CONTRATO
		where $SnRelStatusContratoAuxDSP/DT_FIM eq xs:dateTime(xs:date(xs:string('2049-12-30')))
	for $SnCidadeOperadoraDSP in snc1:SnCidadeOperadoraDSP()
		where $SnCidadeOperadoraDSP/CID_CONTRATO eq $SnContratoDSP/CID_CONTRATO
	for $SnStatusContratoDSP in sns:SnStatusContratoDSP()
		where $SnRelStatusContratoAuxDSP/ID_STATUS eq $SnStatusContratoDSP/ID_STATUS_CONTRATO
		where $SnStatusContratoDSP/DESCRICAO ne 'CANCELADO'
	for $SnParametroDSP in snp3:SnParametroDSP()
		where $SnCidadeOperadoraDSP/ID_EMPRESA eq $SnParametroDSP/ID_EMPRESA
		where $SnParametroDSP/NOME_PARAMETRO eq fn:data('PRAZO_INADIMPLENCIA')
	for $SnParametroDSP2 in snp3:SnParametroDSP()
		where $SnCidadeOperadoraDSP/ID_EMPRESA eq $SnParametroDSP2/ID_EMPRESA
		where $SnParametroDSP2/NOME_PARAMETRO eq fn:data('CONV_SOA_CUSTOMER')
	
	return
		let $segmentos := tns:obterSegmentoNegocio($SnContratoDSP/NUM_CONTRATO,$SnContratoDSP/CID_CONTRATO)
		let $segmentoContrato := tns:getSegmentacaoContrato($SnContratoDSP/NUM_CONTRATO,$SnContratoDSP/CID_CONTRATO)
		let $perfilContrato := tns:getTipoPerfil($SnContratoDSP/NUM_CONTRATO,$SnContratoDSP/CID_CONTRATO)
		let $enderecos := tns:getEnderecos($SnContratoDSP/NUM_CONTRATO,$SnContratoDSP/CID_CONTRATO,$SnAssinanteDSP/ID_ENDER_INSTALACAO)
		let $flagAdim := tns:getFlagAdimpelncia($SnContratoDSP/NUM_CONTRATO,$SnContratoDSP/CID_CONTRATO)
		let $tipoCobr := tns:getTipoCobranca($SnContratoDSP/ID_TIPO_COBRANCA)
		return 
        	<ns1:contratoAssinante>
            	<ns1:CELULA>{fn:data($enderecos/ns1:CELULA)}</ns1:CELULA>
            	<ns1:COD_IMOVEL>{xs:long( fn:data($enderecos/ns1:COD_IMOVEL))}</ns1:COD_IMOVEL>
            	<ns1:FLAG_NODE_SD>{fn:data($enderecos/ns1:FLAG_NODE_SD)}</ns1:FLAG_NODE_SD>
            	<ns1:FLAG_PJ>{fn:data($flagAdim/ns1:FLAG_PJ)}</ns1:FLAG_PJ>
             	<ns1:FLAG_VENDA_PPV_EVENTO>{ 
            
            	if(data($segmentos/seg:FLAG_PAYTV_DIGITAL)eq 'S')then 
            		let $contratoCredito := tns:getContratoCredito($SnContratoDSP/NUM_CONTRATO,$SnContratoDSP/CID_CONTRATO)
            		let $creditoProduto := tns:getCreditoProduto($SnContratoDSP/NUM_CONTRATO,$SnContratoDSP/CID_CONTRATO)
            		let $contratoColetivo := tns:obterContratoColetivo($SnContratoDSP/CID_CONTRATO,$SnContratoDSP/NUM_CONTRATO,$SnContratoDSP/ID_TIPO_CONTRATO)
            		let $dataCompra := tns:obterUltimaDataPagamento($SnContratoDSP/CID_CONTRATO,$contratoColetivo,$SnContratoDSP/DT_CADASTRO)
            		let  $totalVenda := tns:obterTotalVenda($SnContratoDSP/CID_CONTRATO,$SnContratoDSP/NUM_CONTRATO,$dataCompra)
            		return
            			if(xs:decimal($creditoProduto + $contratoCredito - $totalVenda)>0)then
            				fn:data('S')
            			else(fn:data('N'))
           		else(fn:data('N'))                     
      		}                     
            </ns1:FLAG_VENDA_PPV_EVENTO>
            <ns1:NODE>{fn:data($enderecos/ns1:NODE)}</ns1:NODE>
            <ns1:SA_CPF>{fn:data($SnAssinanteDSP/CPF)}</ns1:SA_CPF>
            <ns1:SA_E_MAIL>{fn:data($SnAssinanteDSP/E_MAIL)}</ns1:SA_E_MAIL>
            <ns1:SA_ID_ENDER_INSTALACAO>{fn:data($SnAssinanteDSP/ID_ENDER_INSTALACAO)}</ns1:SA_ID_ENDER_INSTALACAO>
            <ns1:SA_ID_TIPO_PESSOA>{fn:data($SnAssinanteDSP/ID_TIPO_PESSOA)}</ns1:SA_ID_TIPO_PESSOA>
            <ns1:SA_NOME_TITULAR>{fn:data($SnAssinanteDSP/NOME_TITULAR)}</ns1:SA_NOME_TITULAR>
            <ns1:SC_CID_CONTRATO>{fn:data($SnContratoDSP/CID_CONTRATO)}</ns1:SC_CID_CONTRATO>
            <ns1:SC_DT_CADASTRO>{fn-bea:date-from-dateTime($SnContratoDSP/DT_CADASTRO)}</ns1:SC_DT_CADASTRO>
            <ns1:SC_ID_TIPO_COBRANCA>{fn:data($SnContratoDSP/ID_TIPO_COBRANCA)}</ns1:SC_ID_TIPO_COBRANCA>
            <ns1:SC_ID_TIPO_CONTRATO>{fn:data($SnContratoDSP/ID_TIPO_CONTRATO)}</ns1:SC_ID_TIPO_CONTRATO>
            <ns1:SC_NUM_CONTRATO>{fn-bea:decimal-round(fn:data($SnContratoDSP/NUM_CONTRATO))}</ns1:SC_NUM_CONTRATO>
            <ns1:SCO_COD_OPERADORA>{fn:data($SnCidadeOperadoraDSP/COD_OPERADORA)}</ns1:SCO_COD_OPERADORA>
            <ns1:SCO_ID_EMPRESA>{fn:data($SnCidadeOperadoraDSP/ID_EMPRESA)}</ns1:SCO_ID_EMPRESA>
            <ns1:SDV_DIA>{xs:decimal(tns:getDiaVcto(fn:data($SnContratoDSP/ID_DIA_VCTO)))}</ns1:SDV_DIA>
            <ns1:SE_ID_EDIFICACAO>{fn:data($enderecos/ns1:SE_ID_EDIFICACAO)}</ns1:SE_ID_EDIFICACAO>
            <ns1:SRAP_DESCRICAO>{$perfilContrato/ns1:SRAP_DESCRICAO}</ns1:SRAP_DESCRICAO>
            <ns1:SRAS_ID_TIPO_SEGMENTO>{$segmentoContrato/ns1:SRAS_ID_TIPO_SEGMENTO}</ns1:SRAS_ID_TIPO_SEGMENTO>
            <ns1:SRCPC_ID_PERFIL_CLIENTE>{$perfilContrato/ns1:SRCPC_ID_PERFIL_CLIENTE}</ns1:SRCPC_ID_PERFIL_CLIENTE>
            <ns1:SRSCA_ID_STATUS>{fn:data($SnRelStatusContratoAuxDSP/ID_STATUS)}</ns1:SRSCA_ID_STATUS>
            <ns1:SSC_DESCRICAO>{fn:data($SnStatusContratoDSP/DESCRICAO)}</ns1:SSC_DESCRICAO>
            <ns1:STATUS_ADIMPL>{tns:flagStatusAdimplente(xs:integer(fn:data($SnContratoDSP/NUM_CONTRATO)),fn:data($SnContratoDSP/CID_CONTRATO),string(data($SnParametroDSP/VLR_PARAMETRO)))}</ns1:STATUS_ADIMPL>
            <ns1:STC_DESCRICAO>{fn:data($tipoCobr/ns1:STC_DESCRICAO)}</ns1:STC_DESCRICAO>
            <ns1:STS_DESCRICAO>{$segmentoContrato/ns1:STS_DESCRICAO}</ns1:STS_DESCRICAO>
            <ns1:DT_NASCIMENTO>{fn-bea:date-from-dateTime(fn:data($SnAssinanteDSP/DT_NASCIMENTO))}</ns1:DT_NASCIMENTO>
			<ns1:FLAG_AREA_NOW>{tns:validarFlagAreaNowEndereco($enderecos, $SnContratoDSP/CID_CONTRATO)}</ns1:FLAG_AREA_NOW> 
            <ns1:FLAG_CHIP_CLARO>{tns:buscarFlagChipClaro($SnContratoDSP/NUM_CONTRATO,$SnContratoDSP/CID_CONTRATO)}</ns1:FLAG_CHIP_CLARO>
            <ns1:FLAG_CLOUD>{tns:flagCloud($SnContratoDSP/NUM_CONTRATO,$SnContratoDSP/CID_CONTRATO)}</ns1:FLAG_CLOUD>            
			<ns1:SG_NEGOCIO>
                <ns1:FLAG_NETFONE>{data($segmentos/seg:FLAG_NETFONE)}</ns1:FLAG_NETFONE>
                <ns1:FLAG_INTERNET>{data($segmentos/seg:FLAG_INTERNET)}</ns1:FLAG_INTERNET>
                <ns1:FLAG_PAYTV_ANALOGICO>{data($segmentos/seg:FLAG_PAYTV_ANALOGICO)}</ns1:FLAG_PAYTV_ANALOGICO>
                <ns1:FLAG_PAYTV_DIGITAL>{data($segmentos/seg:FLAG_PAYTV_DIGITAL)}</ns1:FLAG_PAYTV_DIGITAL>
            </ns1:SG_NEGOCIO>
			<ns1:MIGRACAO_NET_UNO>{fn:data($SnParametroDSP2/VLR_PARAMETRO)}</ns1:MIGRACAO_NET_UNO>
        </ns1:contratoAssinante>
	else()

};

(::pragma  function <f:function kind="library" visibility="private" isPrimary="false" xmlns:f="urn:annotations.ld.bea.com"/>::)
(:Função responsavel ertornar a data do ultimo pagamento ou a data de cadastro do contrato quando este não existir cobrança pagas :)
declare function tns:obterUltimaDataPagamento($cidadeContrato as xs:string, $numeroContrato as xs:integer, $dtCadastroContrato as xs:dateTime) as xs:dateTime*{
	let $primeiro := 
	let $retorno :=
		if(not(empty($cidadeContrato)) and not(empty($numeroContrato)))then
			for $SnCobrancaDSP in snc6:SnCobrancaDSP()
				where $SnCobrancaDSP/NUM_CONTRATO eq $numeroContrato
				where $SnCobrancaDSP/CID_CONTRATO eq $cidadeContrato
			for $SnRelObjSitCobrancaDSP in snr7:SnRelObjSitCobrancaDSP()
			for $SnSitCobrancaDSP in sns1:SnSitCobrancaDSP()
				where $SnCobrancaDSP/ID_SIT_COBRANCA eq $SnSitCobrancaDSP/ID_SIT_COBRANCA
				where $SnSitCobrancaDSP/ID_SIT_COBRANCA eq $SnRelObjSitCobrancaDSP/ID_SIT_COBRANCA
				where $SnRelObjSitCobrancaDSP/ID_OBJETO eq 1
				order by $SnCobrancaDSP/DT_VENCTO descending
			return if(not(empty($SnCobrancaDSP/DT_VENCTO)))then $SnCobrancaDSP/DT_VENCTO else($dtCadastroContrato)
		else($dtCadastroContrato)
	return if(not(empty($retorno)))then $retorno else($dtCadastroContrato)
	for $primeiroRegistro in subsequence($primeiro, 1, 1)
	return $primeiroRegistro
};

(::pragma  function <f:function kind="library" visibility="private" isPrimary="false" xmlns:f="urn:annotations.ld.bea.com"/>::)
(:Função responsavel por obter vendas para o contrato:)
declare function tns:obterTotalVenda($cidadeContrato as xs:string, $numeroContrato as xs:integer,$dataCompra as xs:dateTime) as xs:decimal*{
		 	let $soma :=
		 	if(not(empty($cidadeContrato)) and not(empty($numeroContrato)) and not(empty($dataCompra)))then
				for $PpVendaPPVDSP in ppv:PpVendaPPVDSP()
					where $PpVendaPPVDSP/NUM_CONTRATO eq $numeroContrato
					where $PpVendaPPVDSP/CID_CONTRATO eq $cidadeContrato
					where $PpVendaPPVDSP/DATA_COMPRA >= $dataCompra
					where ($PpVendaPPVDSP/ID_STATUS_VENDA eq 1 or $PpVendaPPVDSP/ID_STATUS_VENDA eq 2 or $PpVendaPPVDSP/ID_STATUS_VENDA eq 5)
	
				return 
					$PpVendaPPVDSP/PRECO_COBRADO
		else(xs:decimal(0))
			return if(empty($soma))then xs:decimal(0) else(fn:sum($soma))
		 
	
};

(::pragma  function <f:function kind="library" visibility="private" isPrimary="false" xmlns:f="urn:annotations.ld.bea.com"/>::)
(:Função responsavel por obter o saldo do contrato: creditos - total de compras:)
declare function tns:obterSaldoContrato($creditoProduto as xs:decimal, $contratoCredito as xs:decimal,$totalVenda as xs:decimal) as xs:decimal*{	
	if(not(empty($creditoProduto)) and not(empty($contratoCredito)) )then	
		$contratoCredito + $creditoProduto -$totalVenda
	else(xs:decimal(0))
};

(::pragma  function <f:function kind="library" visibility="private" isPrimary="false" xmlns:f="urn:annotations.ld.bea.com"/>::)
(:: Função responsavel por obter o segmento do contrato:)
declare function tns:getSegmentacaoContrato($contrato as xs:integer, $cidadeContrato as xs:string) as element(ns1:contratoAssinante)* {
	if(not(empty($contrato)) and not(empty($cidadeContrato)))then
		for $SnRelAssinanteSegmentacaoDSP in snr:SnRelAssinanteSegmentacaoDSP()
			where $SnRelAssinanteSegmentacaoDSP/CID_CONTRATO eq $cidadeContrato
			where $SnRelAssinanteSegmentacaoDSP/NUM_CONTRATO eq $contrato
		for $SnTipoSegmentoDSP in snt:SnTipoSegmentoDSP()
			where $SnRelAssinanteSegmentacaoDSP/ID_TIPO_SEGMENTO eq $SnTipoSegmentoDSP/ID_TIPO_SEGMENTO 
		return 
		<ns1:contratoAssinante>
     
            <ns1:SRAS_ID_TIPO_SEGMENTO>{$SnRelAssinanteSegmentacaoDSP/ID_TIPO_SEGMENTO}</ns1:SRAS_ID_TIPO_SEGMENTO>
           
            <ns1:STS_DESCRICAO>{$SnTipoSegmentoDSP/DESCRICAO}</ns1:STS_DESCRICAO>
            

        </ns1:contratoAssinante>
    else( <ns1:contratoAssinante/>)
};

(::pragma  function <f:function kind="library" visibility="private" isPrimary="false" xmlns:f="urn:annotations.ld.bea.com"/>::)
(:: Função responsavel por obter o tipo de perfil do contrato:)
declare function tns:getTipoPerfil($contrato as xs:integer, $cidadeContrato as xs:string) as element(ns1:contratoAssinante)* {
if(not(empty($contrato)) and not(empty($cidadeContrato)))then
	for $SnRelContratoPerfilCltDSP in snr2:SnRelContratoPerfilCltDSP()
		where $contrato eq $SnRelContratoPerfilCltDSP/NUM_CONTRATO
		where $cidadeContrato eq $SnRelContratoPerfilCltDSP/CID_CONTRATO
		where $SnRelContratoPerfilCltDSP/DT_FIM_OFERTA eq xs:dateTime(xs:date(xs:string('2049-12-30')))
	for $SnRelAtributosParametroDSP in snr3:SnRelAtributosParametroDSP()
		where $SnRelAtributosParametroDSP/ID_ATRIBUTO_PARAMETRO eq $SnRelContratoPerfilCltDSP/ID_PERFIL_CLIENTE
	where $SnRelAtributosParametroDSP/ID_ATRIBUTO eq xs:integer('10')
	return 
	<ns1:contratoAssinante>
     
            <ns1:SRCPC_ID_PERFIL_CLIENTE>{fn:data($SnRelContratoPerfilCltDSP/ID_PERFIL_CLIENTE)}</ns1:SRCPC_ID_PERFIL_CLIENTE>
           
            <ns1:SRAP_DESCRICAO>{fn:data($SnRelAtributosParametroDSP/DESCRICAO)}</ns1:SRAP_DESCRICAO>
            

        </ns1:contratoAssinante>
   else(<ns1:contratoAssinante/>)
};

(::pragma  function <f:function kind="library" visibility="private" isPrimary="false" xmlns:f="urn:annotations.ld.bea.com"/>::)
(:: Função responsavel por obter o dia de vencimento da fatura de contrato:)
declare function tns:getDiaVcto($idDiaVenctoContrato as xs:integer) as xs:integer* {
	if(not(empty($idDiaVenctoContrato)))then
		for $SnDiaVcto in snd:SnDiaVcto()
			where $SnDiaVcto/ID_DIA_VCTO eq $idDiaVenctoContrato
		return $SnDiaVcto/DIA
	else()
};

(::pragma  function <f:function kind="library" visibility="private" isPrimary="false" xmlns:f="urn:annotations.ld.bea.com"/>::)
(:: Função responsavel por obter as informações de endereço do contrato:)
declare function tns:getEnderecos($contrato as xs:integer, $cidadeContrato as xs:string,$idEnderecoInstalacao as xs:integer) as element(ns1:contratoAssinante)* {
	if(not(empty($contrato)) and not(empty($cidadeContrato)) and not(empty($idEnderecoInstalacao)))then
		for $SnEnderDSP in sne:SnEnderDSP()
			where $SnEnderDSP/ID_ENDER eq $idEnderecoInstalacao

		for $IeEnderecosDSP in iee:sqlQuery($SnEnderDSP/ID_ENDER)
			where $SnEnderDSP/ID_EDIFICACAO eq $IeEnderecosDSP/SE_ID_EDIFICACAO
			
			return
			
				if(not(empty($SnEnderDSP/ID_EDIFICACAO)) and not(empty($IeEnderecosDSP/NODE))) then

					for $FlagNodeSDDSP in fla2:sqlQuery($cidadeContrato, $contrato, $SnEnderDSP/ID_EDIFICACAO, $IeEnderecosDSP/NODE)
					where fn:not(fn:empty($FlagNodeSDDSP/FLAG_NODE_SD))
						return 
							<ns1:contratoAssinante>		            
					     		<ns1:CELULA>{fn:data($IeEnderecosDSP/CELULA)}</ns1:CELULA>
					            <ns1:COD_IMOVEL>{if(fn:empty($IeEnderecosDSP/COD_IMOVEL))then xs:long(0) else(xs:long( fn:data($IeEnderecosDSP/COD_IMOVEL)))}</ns1:COD_IMOVEL>				            
					            <ns1:FLAG_NODE_SD>{fn:data($FlagNodeSDDSP/FLAG_NODE_SD)}</ns1:FLAG_NODE_SD>
					            <ns1:NODE>{fn:data($IeEnderecosDSP/NODE)}</ns1:NODE>
					            <ns1:SE_ID_EDIFICACAO>{fn:data($SnEnderDSP/ID_EDIFICACAO)}</ns1:SE_ID_EDIFICACAO>
					        </ns1:contratoAssinante>
					        
				else(<ns1:contratoAssinante>
						<ns1:CELULA>{fn:data($IeEnderecosDSP/CELULA)}</ns1:CELULA>
						<ns1:COD_IMOVEL/>
						<ns1:FLAG_NODE_SD/>
						<ns1:NODE/>
						<ns1:SE_ID_EDIFICACAO>{fn:data($SnEnderDSP/ID_EDIFICACAO)}</ns1:SE_ID_EDIFICACAO>
					 </ns1:contratoAssinante>)
        
    else(<ns1:contratoAssinante/>)
};

(::pragma  function <f:function kind="library" visibility="private" isPrimary="false" xmlns:f="urn:annotations.ld.bea.com"/>::)
(:: Função responsavel por obter a flag de adimplencia contrato:)
declare function tns:getFlagAdimpelncia($contrato as xs:integer, $cidadeContrato as xs:string) as element(ns1:contratoAssinante)* {
	for $FlagAdimDSP in fla:sqlQuery($contrato, $cidadeContrato)
	where $FlagAdimDSP/FLAG_PJ eq 'S' or $FlagAdimDSP/FLAG_PJ eq 'N'
	return 
	<ns1:contratoAssinante>
     		<ns1:FLAG_PJ>{fn:data($FlagAdimDSP/FLAG_PJ)}</ns1:FLAG_PJ>
        </ns1:contratoAssinante>
};

(::pragma  function <f:function kind="library" visibility="private" isPrimary="false" xmlns:f="urn:annotations.ld.bea.com"/>::)
(:: Função responsavel por obter o tipo cobranca do contrato:)
declare function tns:getTipoCobranca($idTipoCobranca as xs:integer) as element(ns1:contratoAssinante)* {
	if(not(empty($idTipoCobranca)))then
		for $SnTipoCobrancaDSP in snt1:SnTipoCobrancaDSP()
		where $idTipoCobranca eq $SnTipoCobrancaDSP/ID_TIPO_COBRANCA
		return 
			<ns1:contratoAssinante>
     			<ns1:STC_DESCRICAO>{fn:data($SnTipoCobrancaDSP/DESCRICAO)}</ns1:STC_DESCRICAO>
        	</ns1:contratoAssinante>
     else()
};

(::pragma  function <f:function kind="library" visibility="private" isPrimary="false" xmlns:f="urn:annotations.ld.bea.com"/>::)
(:: Função responsavel por obter credito do contrato:)
declare function tns:getContratoCredito($contrato as xs:integer, $cidadeContrato as xs:string) as xs:decimal* {
	
		let $retorno := 
			let $credito :=
			if(not(empty($contrato)) and not(empty($cidadeContrato)))then
				for $SnContratoCreditoPPVDSP in snc9:SnContratoCreditoPPVDSP()
					where $SnContratoCreditoPPVDSP/CID_CONTRATO eq $cidadeContrato
					where $SnContratoCreditoPPVDSP/NUM_CONTRATO eq $contrato
					where $SnContratoCreditoPPVDSP/DT_FIM eq xs:dateTime(xs:date(xs:string('2049-12-30')))
				return if(empty($SnContratoCreditoPPVDSP/CREDITO))then xs:decimal(0) else($SnContratoCreditoPPVDSP/CREDITO)
			else(xs:decimal(0))
			return if(empty($credito))then xs:decimal(0) else($credito)
		for $primeiroContrato in subsequence($retorno, 1, 1)
		return $primeiroContrato
	
};


(::pragma  function <f:function kind="library" visibility="private" isPrimary="false" xmlns:f="urn:annotations.ld.bea.com"/>::)
(:: Função responsavel por obter credito do contrato:)
declare function tns:getCreditoProduto($contrato as xs:integer, $cidadeContrato as xs:string) as xs:decimal* {
	let $retorno := 
		let $creditoproduto :=
			if(not(empty($contrato)) and not(empty($cidadeContrato)))then
				for $SnRelPontoProdutoDSP in snr5:SnRelPontoProdutoDSP()
					where $SnRelPontoProdutoDSP/NUM_CONTRATO eq $contrato
					where $SnRelPontoProdutoDSP/CID_CONTRATO eq $cidadeContrato
					where $SnRelPontoProdutoDSP/DT_FIM eq xs:dateTime(xs:date(xs:string('2049-12-30')))
					where $SnRelPontoProdutoDSP/INSTALADO eq xs:integer ('1')
				for $SnProdutoDSP in snp2:SnProdutoDSP()
					where $SnProdutoDSP/ID_PRODUTO eq $SnRelPontoProdutoDSP/ID_PRODUTO
					where $SnProdutoDSP/ID_TIPO_PRODUTO eq xs:integer ('1')
				for $SnRelAssinanteSegmentacaoDSP in snr:SnRelAssinanteSegmentacaoDSP()
					where $SnRelAssinanteSegmentacaoDSP/NUM_CONTRATO eq $SnRelPontoProdutoDSP/NUM_CONTRATO
					where $SnRelAssinanteSegmentacaoDSP/CID_CONTRATO eq $SnRelPontoProdutoDSP/CID_CONTRATO
				for $SnRelPontoProdutoPrecoDSP in snr8:SnRelPontoProdutoPrecoDSP()
					where $SnRelPontoProdutoPrecoDSP/ID_TIPO_PONTO eq 1
					where $SnRelPontoProdutoPrecoDSP/DT_FIM eq xs:dateTime(xs:date(xs:string('2049-12-30')))
					where $SnRelPontoProdutoPrecoDSP/ID_PONTO eq $SnRelPontoProdutoDSP/ID_PONTO
				for $SnProdutoCreditoPPVDSP in snp4:SnProdutoCreditoPPVDSP()
					where $SnProdutoCreditoPPVDSP/ID_TIPO_SEGMENTO eq $SnRelAssinanteSegmentacaoDSP/ID_TIPO_SEGMENTO
					where $SnRelAssinanteSegmentacaoDSP/CID_CONTRATO eq $SnRelPontoProdutoDSP/CID_CONTRATO
					where $SnRelAssinanteSegmentacaoDSP/NUM_CONTRATO eq $SnRelPontoProdutoDSP/NUM_CONTRATO
					where $SnProdutoCreditoPPVDSP/ID_PRODUTO eq $SnRelPontoProdutoDSP/ID_PRODUTO
					where $SnProdutoCreditoPPVDSP/DT_FIM eq xs:dateTime(xs:date(xs:string('2049-12-30')))
 				    where $SnProdutoCreditoPPVDSP/CID_CONTRATO eq $cidadeContrato
					
				return if(empty($SnProdutoCreditoPPVDSP/CREDITO))then xs:decimal(0) else($SnProdutoCreditoPPVDSP/CREDITO)
			else(xs:decimal(0))
		return if(empty($creditoproduto))then xs:decimal(0) else($creditoproduto)
		for $primeiroContrato in subsequence($retorno, 1, 1)
		return $primeiroContrato
};

(::pragma  function <f:function kind="library" visibility="private" isPrimary="false" xmlns:f="urn:annotations.ld.bea.com"/>::)
(:Função responsavel retornal qual o contrato que sera usado para obter a ultima data de pagamento, pode ser ontrato normal ou contrato filiado:)
declare function tns:obterContratoColetivo($cidadeContrato as xs:string, $numeroContrato as xs:integer, $tipoContrato as xs:integer) as xs:integer*{
	if(not(empty($cidadeContrato)) and not(empty($numeroContrato)) and not(empty($tipoContrato)))then
		let $rownum :=
		let $numContr := 
			if($tipoContrato eq 3)then
				for $SnRelContratoMestreFiliadoDSP in snr6:SnRelContratoMestreFiliadoDSP()
					where $SnRelContratoMestreFiliadoDSP/NUM_CONTRATO_FILIADO eq $numeroContrato
					where $SnRelContratoMestreFiliadoDSP/CID_CONTRATO eq $cidadeContrato
					where $SnRelContratoMestreFiliadoDSP/DT_FIM eq xs:dateTime(xs:date(xs:string('2049-12-30'))) 
				for $SnContratoColetivoDSP in snc8:SnContratoColetivoDSP()
					where $SnContratoColetivoDSP/NUM_CONTRATO eq $SnRelContratoMestreFiliadoDSP/NUM_CONTRATO_MESTRE
					where $SnContratoColetivoDSP/CID_CONTRATO eq $SnRelContratoMestreFiliadoDSP/CID_CONTRATO
				return
					if($SnContratoColetivoDSP/ID_MODALIDADE_COBRANCA eq 3 or $SnContratoColetivoDSP/ID_MODALIDADE_COBRANCA eq 2)then
							$numeroContrato
				
					else($SnRelContratoMestreFiliadoDSP/NUM_CONTRATO_MESTRE)
			else($numeroContrato)
			return
			if(not(empty($numContr)))then  $numContr else($numeroContrato)
			for $primeiroContrato in subsequence($rownum, 1, 1)
			return $primeiroContrato
			
			
	else($numeroContrato)

};

(::pragma  function <f:function kind="library" visibility="private" isPrimary="false" xmlns:f="urn:annotations.ld.bea.com"/>::)

(:Funcao para consultar produtos instalados no Node :)
declare function tns:definirAreaNow($codOperadora as xs:int, $codNode as xs:string, $codProduto as xs:int) as xs:boolean?{
	let $areaNow :=
		for $NodeProdutoDSP in nod:NodeProdutoDSP()
			where $NodeProdutoDSP/COD_OPERADORA eq $codOperadora
			where $NodeProdutoDSP/COD_NODE eq $codNode
			where $NodeProdutoDSP/COD_PRODUTO eq $codProduto
		return
		if (not(empty($NodeProdutoDSP/DT_ATIVACAO))) then
			fn:true()
		else(fn:false())
	return
	if (not(empty($areaNow))) then
		fn:true()
	else (fn:false())
    
    
};

(::pragma  function <f:function kind="library" visibility="private" isPrimary="false" xmlns:f="urn:annotations.ld.bea.com"/>::)
(:Função responsavel retornar se o cliente possui recebeu um chip da Claro :)
declare function tns:buscarFlagChipClaro($numeroContrato as xs:integer, $cidadeContrato as xs:string) as xs:string{
	let $resultado :=
		for $SnRelObjProdutoDSP in snr10:SnRelObjProdutoDSP()
			where $SnRelObjProdutoDSP/ID_OBJETO eq xs:double(624) or $SnRelObjProdutoDSP/ID_OBJETO eq xs:double(625)
		for $SnRelPontoProdutoDSP in snr5:SnRelPontoProdutoDSP()
			where $SnRelPontoProdutoDSP/DT_FIM eq xs:dateTime(xs:date(xs:string('2049-12-30')))
			where $SnRelPontoProdutoDSP/INSTALADO eq 1
			where $SnRelPontoProdutoDSP/NUM_CONTRATO eq $numeroContrato
			where $SnRelPontoProdutoDSP/CID_CONTRATO eq $cidadeContrato
			where $SnRelPontoProdutoDSP/ID_PRODUTO eq $SnRelObjProdutoDSP/ID_PRODUTO
		return
			data (string($SnRelPontoProdutoDSP/ID_PRODUTO))
	return
		if(not(empty($resultado))) then
			data ('S')
		else (data('N'))
};

(::pragma  function <f:function kind="library" visibility="private" isPrimary="false" xmlns:f="urn:annotations.ld.bea.com"/>::)
(:Função responsavel retornar a flag cloud, isto é, se o cliente possui o serviço cloud contratado :)
declare function tns:flagCloud($numContrato as xs:integer, $cidContrato as xs:string) as xs:string*{
	let $retorno :=
		if(not(empty($cidContrato)) and not(empty($numContrato)))then
			for $SnServicoContratoDSP in sns3:SnServicoContratoDSP()
			for $SnRelAtributosProdutoDSP in snr9:SnRelAtributosProdutoDSP()
			for $SnProdutoDSP in snp2:SnProdutoDSP()
				where $SnServicoContratoDSP/NUM_CONTRATO eq $numContrato
				where $SnServicoContratoDSP/CID_CONTRATO eq $cidContrato
				where $SnRelAtributosProdutoDSP/ID_PRODUTO eq $SnProdutoDSP/ID_PRODUTO
				where $SnProdutoDSP/ID_PRODUTO eq $SnServicoContratoDSP/ID_SERVICO_CONTRATO
				where $SnRelAtributosProdutoDSP/ID_ATRIBUTO_PARAMETRO eq xs:integer('2286') or $SnRelAtributosProdutoDSP/ID_ATRIBUTO_PARAMETRO eq xs:integer('2287')
				where $SnServicoContratoDSP/DT_FIM eq xs:dateTime(xs:date(xs:string('2049-12-30')))
			return
			if(not(empty($SnProdutoDSP/DESCRICAO_BOLETO))) then
				data ('S')
			else (data('N'))
		else(data('N'))
	return
		if(not(empty($retorno))) then
			data ('S')
		else(data('N'))
};

(::pragma  function <f:function kind="library" visibility="public" isPrimary="false" xmlns:f="urn:annotations.ld.bea.com"/>::)

declare function tns:validarFlagAreaNowEndereco($contratoAssinante as element(ns1:contratoAssinante), $SnCidadeOperadoraDSP as xs:string*) as xs:string{

  let $flagRetorno := 
    if (not(empty(fn:data($contratoAssinante/ns1:NODE))) 
       and ((tns:definirAreaNow(xs:int($SnCidadeOperadoraDSP),fn:data($contratoAssinante/ns1:NODE),xs:int(2))
	    or   tns:definirAreaNow(xs:int($SnCidadeOperadoraDSP),fn:data($contratoAssinante/ns1:NODE),xs:int(4)) 
		or   tns:definirAreaNow(xs:int($SnCidadeOperadoraDSP),fn:data($contratoAssinante/ns1:NODE),xs:int(5))))) then
		
		data ('S')	
	else	
	    data ('N')

	return
		if(not(empty($flagRetorno))) then
			data ('S')
		else
		    data ('N')
		    
};


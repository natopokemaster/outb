<project default="build">
  
  <description>
    Project build script. All public targets require the "workspace" property to be
    set at invocation. It can either point at the Eclipse workspace directory that
    this project belongs to or an exported workspace.xml file. The wl.home property
    may also need to be specified unless WL_HOME environment variable is defined.
  </description>
  
  <target name="init.env" unless="init.env.executed">
    <property name="init.env.executed" value="true"/>
    <property environment="env"/>
    <condition property="wl.home" value="${env.WL_HOME}">
      <isset property="env.WL_HOME"/>
    </condition>
    <fail unless="wl.home" message="The wl.home property needs to be set!"/>
  </target>
   
  <target name="init.typedefs" depends="init.env" unless="init.typedefs.executed">
    <property name="init.typedefs.executed" value="true"/>
    <typedef resource="com/bea/wlw/antlib/antlib.xml">
      <classpath>
        <fileset dir="${wl.home}">
          <include name="workshop/lib/wlw-antlib.jar"/>
          <include name="workshop/lib/wlw-util.jar"/>
          <include name="workshop/lib/wlw-libmodules.jar"/>
          <include name="workshop/lib/wlw-splitsrc.jar"/>
          <include name="server/lib/ant/ant-contrib-1.0b1.jar"/>
          <include name="portal/lib/eclipse/wlp-antlib.jar"/>
        </fileset>
      </classpath>
    </typedef>
  </target>
   
  <target name="init" depends="init.env,init.typedefs" unless="init.executed">
    
    <property name="init.executed" value="true"/>
    
    <fail unless="workspace" message="The workspace property needs to be set!"/>
    <dirname property="project.dir" file="${ant.file}"/>
    <property name="echo.metadata" value="false"/>
    
    <mdimport workspace="${workspace}" pjdir="${project.dir}" echo="${echo.metadata}">
      <option name="skipAnnotationProcessors" value="com.bea.wlw.webservices.core"/>
    </mdimport>
    
    <property name="archive.name" value="${project.name}.war"/>
    <property name="uri" value="${archive.name}"/>
     <taskdef name="xmlbean"
              classname="org.apache.xmlbeans.impl.tool.XMLBean">
        <classpath>
            <pathelement path="${wl.home}/common/lib/apache_xbean.jar"/>
            <pathelement path="${wl.home}/common/eclipse/plugins/com.bea.eclipse.common.lib.apache_xbean2/jsr173_api.jar"/>
        </classpath>
     </taskdef>
    
    <property name="process.projectbeans.output.dir" value="${project.dir}/build/processoutput/EJB/ProjectBeans"/>
    <property name="process.componentbeans.output.dir" value="${project.dir}/build/processoutput/EJB/ComponentBeans"/>
    <property name="process.projectbeans.name" value="${project.name}_WLI_ProjectBeans"/>
    <property name="process.componentbeans.name" value="${project.name}_WLI_ComponentBeans"/>
    <taskdef name="channel-aggregate" classname="com.bea.wli.broker.manifest.ChannelBean" onerror="report">
      <classpath>
        <fileset dir="${wl.home}">
          <include name="server/lib/jpd.jar"/>
          <include name="server/lib/knex81.jar"/>
          <include name="integration/lib/jpdpublic.jar"/>
          <include name="common/lib/apache_xbean.jar"/>
          <include name="server/lib/weblogic.jar"/>
        </fileset>
      </classpath>
    </taskdef>
    
    <property name="generated.module.root" value="${project.dir}/build/weboutput"/>
    
    <property name="assembly.src" value="${project.dir}/build/assembly/.src"/>
    
  </target>
  
  <target name="build" depends="init" description=" compiles the source files; does not package the results">
    
     <for list="0,1,2,3,4,5,6,7,8,9" param="i">
            <sequential>
                <if>
                  <and>
                    <isset property="xbean.src.@{i}.dir"/>
                    <available file="${xbean.src.@{i}.dir}"/>
                  </and>
                  <then>
                    <fileset id="xbean.src.paths.@{i}"
                             dir="${xbean.src.@{i}.dir}"
                             includes="${xbean.src.@{i}.include}"
                             excludes="${xbean.src.@{i}.exclude}"/>
                  </then>
                  <else>
                    <fileset id="xbean.src.paths.@{i}"
                             file="null_file_set"/>
                  </else>
               </if>
             </sequential>
     </for>
     <if>
       <isset property="xbean.include-classpath-contributions"/>
       <then>
         <path id="xbean.classpath">
             <path refid="java.classpath"/>
         </path>
       </then>
       <else>
         <path id="xbean.classpath">
             <pathelement location="${wl.home}/common/lib/apache_xbean.jar"/>
         </path>
       </else>
     </if>
     <mkdir dir="${xbean.src.output.dir}"/>
     <mkdir dir="${xbean.bin.output.dir}"/>
     <xmlbean
        javasource="${xbean.java-version}"
        download="${xbean.download-network-urls}"
        typesystemname="${xbean.schema-type-name}"
        noupa="${xbean.unique-particle-attribution}"
        nopvr="${xbean.particle-valid-restriction}"
        noannotations="${xbean.skip-annotations}"
        ignoreDuplicatesInNamespaces="${xbean.namespaces-to-ignore-dups}"
        srcgendir="${xbean.src.output.dir}"
        classgendir="${xbean.bin.output.dir}"
        classpathref="xbean.classpath"
        srconly="true">
         <fileset refid="xbean.src.paths.0"/>
         <fileset refid="xbean.src.paths.1"/>
         <fileset refid="xbean.src.paths.2"/>
         <fileset refid="xbean.src.paths.3"/>
         <fileset refid="xbean.src.paths.4"/>
         <fileset refid="xbean.src.paths.5"/>
         <fileset refid="xbean.src.paths.6"/>
         <fileset refid="xbean.src.paths.7"/>
         <fileset refid="xbean.src.paths.8"/>
         <fileset refid="xbean.src.paths.9"/>
     </xmlbean>
    
    <for-each-xbean-src-path>
      <mkdir dir="${.xbean.src.dir}"/>
      <java classname="com.bea.wli.mfl.MFLCompile" fork="true" failonerror="true">
        <classpath>
          <fileset dir="${wl.home}">
            <include name="server/lib/jpd.jar"/>
            <include name="server/lib/knex81.jar"/>
            <include name="integration/lib/jpdpublic.jar"/>
            <include name="common/lib/apache_xbean.jar"/>
          </fileset>
        </classpath>
        <arg line="${.xbean.src.dir} -d ${xbean.bin.output.dir}"/>
      </java>
    </for-each-xbean-src-path>
    
    <if>
      <isreference refid="apt.factory.path"/>
      <then>
        <mkdir dir="${apt.src.output.dir}"/>
        <for-each-java-src-path>
          <if>
            <available file="${.java.src.dir}"/>
            <then>
              <mkdir dir="${.java.src.output}"/>
              <apt
                sourcepath="${java.sourcepath}"
                srcdir="${.java.src.dir}"
                includes="${.java.src.include}"
                excludes="${.java.src.exclude}"
                destdir="${.java.src.output}"
                preprocessdir="${apt.src.output.dir}"
                classpathref="java.classpath"
                factorypathref="apt.factory.path"
                options="${apt.options}"
                compile="false"/>
            </then>
          </if>
        </for-each-java-src-path>
      </then>
    </if>
    
    <delete file="${java.src.0.output}/channeloutput/wli-channels.xml"/>
    <channel-aggregate baseDirList="${java.sourcepath}" projectName="${project.name}"
      channelManifest="${java.src.0.output}/channeloutput/wli-channels.xml"/>
    
    <for-each-java-src-path>
      <if>
        <available file="${.java.src.dir}"/>
        <then>
          <mkdir dir="${.java.src.output}"/>
          <javac
            sourcepath="${java.sourcepath}"
            srcdir="${.java.src.dir}"
            includes="${.java.src.include}"
            excludes="${.java.src.exclude}"
            destdir="${.java.src.output}"
            classpathref="java.classpath"
            debug="on"/>
        </then>
      </if>
    </for-each-java-src-path>
    
    <delete dir="${generated.module.root}"/>
    <mkdir dir="${generated.module.root}"/>
    
    <resolve-path property="user.web.xml" path="WEB-INF/web.xml"/>
    <resolve-path property="user.weblogic.xml" path="WEB-INF/weblogic.xml"/>
    <copy todir="${generated.module.root}/WEB-INF" file="${user.web.xml}" />
    <copy todir="${generated.module.root}/WEB-INF" file="${user.weblogic.xml}" failonerror="false" />
    
  </target>
  
  <target name="clean" depends="init" description=" removes the files and directories generated by the build target">
    
    <if>
     <available file="${xbean.src.output.dir}"/>
    <then>
     <delete includeEmptyDirs="true">
      <fileset dir="${xbean.src.output.dir}" includes="**/*"/>
     </delete>
    </then>
    </if>
    <if>
     <available file="${xbean.bin.output.dir}"/>
    <then>
     <delete includeEmptyDirs="true">
      <fileset dir="${xbean.bin.output.dir}" includes="**/*"/>
     </delete>
    </then>
    </if>
    
    <delete dir="${project.dir}/mfltypes" quiet="true"/>
    <if>
      <available file="${apt.src.output.dir}"/>
      <then>
        <delete includeEmptyDirs="true">
          <fileset dir="${apt.src.output.dir}" includes="**/*"/>
        </delete>
      </then>
    </if>
    
    <delete dir="${project.dir}/build/processoutput/" quiet="true"/>
    <delete dir="${java.src.0.output}/channeloutput" quiet="true"/>
    <for-each-java-src-path>
      <if>
        <available file="${.java.src.output}"/>
        <then>
          <if>
            <equals arg1="${.java.src.dir}" arg2="${.java.src.output}"/>
            <then>
              <delete includeEmptyDirs="true">
                <fileset dir="${.java.src.output}">
                  <or>
                    <filename name="**/*.class"/>
                    <and>
                      <type type="dir"/>
                      <depth min="0"/>
                    </and>
                  </or>
                </fileset>
              </delete>
            </then>
            <else>
              <delete includeEmptyDirs="true">
                <fileset dir="${.java.src.output}" includes="**/*"/>
              </delete>
            </else>
          </if>
        </then>
      </if>
    </for-each-java-src-path>
    
    
    <delete dir="${assembly.src}"/>
    <delete dir="${generated.module.root}"/>
    
    <mkdir dir="${generated.module.root}"/>
    
  </target>
  
  <target name="assemble" depends="init" description=" assembles the project for iterative dev deployment; requires that the &quot;ear.root&quot; property is specified">
    
    <property name="prefix" value=""/>
     
    <for-each-resource-path>
      <link ear="${ear.root}" source="${.resource.path}" target="${prefix}${uri}/${.resource.prefix}"/>
    </for-each-resource-path>
    
    <!-- Link in referenced utility projects into the WEB-INF/lib directory. -->
     
    <for-each-referenced-component>
      <if>
        <and>
          <equals arg1="${.referenced.component.type}" arg2="project"/>
          <equals arg1="${.referenced.component.target.path}" arg2="WEB-INF/lib"/>
        </and>
        <then>
          <antex
            antfile="${.referenced.component.handle}/build.xml"
            dir="${.referenced.component.handle}"
            target="assemble"
            inheritUserProps="false"
            inheritAll="false"
            inheritRefs="false">
            <property name="wl.home" value="${wl.home}"/>
            <property name="patch.home" value="${patch.home}"/>
            <property name="workspace" value="${workspace}"/>
            <property name="init.typedefs.executed" value="true"/>
            <property name="ear.root" value="${ear.root}"/>
            <property name="prefix" value="${uri}/WEB-INF/lib/"/>
          </antex>
        </then>
      </if>
    </for-each-referenced-component>
    
    <link ear="${ear.root}" source="${xbean.bin.output.dir}" target="${link.target}"/>
    <link ear="${ear.root}" source="${process.projectbeans.output.dir}" target="${process.projectbeans.name}"/>
    <link ear="${ear.root}" source="${process.componentbeans.output.dir}" target="${process.componentbeans.name}"/>
    <if>
      <available file="${process.componentbeans.output.dir}"/>
      <then>
        <antcall target="wliassembly" inheritAll="true" inheritRefs="true" > 
          <param name="ear.root" value="${ear.root}"/> 
        </antcall> 
      </then>
    </if>
    
    <link ear="${ear.root}" source="${generated.module.root}" target="${uri}"/>
    <antcall target="assembly" inheritAll="true" inheritRefs="true" > 
      <param name="ear.root" value="${ear.root}"/> 
    </antcall> 
    
    <antcall target="webservice.build" inheritAll="true" inheritRefs="true" /> 
    
  </target>
  
  <target name="stage" depends="init" description=" copies all of project's resources and build artifacts into a form that's ready for archive creation; staging directory can be overridden via the &quot;staging.dir&quot; property">
    
    <antcall target="assembly" inheritAll="true" inheritRefs="true" > 
      <param name="ear.root" value="${ear.staging.dir}"/> 
    </antcall> 
    
    <antcall target="webservice.build" inheritAll="true" inheritRefs="true" /> 
    
    <property name="staging.dir" value="${project.dir}/.staging"/>
     
    <delete dir="${staging.dir}" quiet="true"/>
    <mkdir dir="${staging.dir}"/>
     
    <for-each-resource-path>
      <if>
        <available file="${.resource.path}"/>
        <then>
          <if>
            <isfile path="${.resource.path}"/>
            <then>
              <copy file="${.resource.path}" tofile="${staging.dir}/${.resource.prefix}"/>
            </then>
            <else>
              <copy todir="${staging.dir}/${.resource.prefix}">
                <fileset dir="${.resource.path}" includes="${.resource.include}" excludes="${.resource.exclude}"/>
              </copy>
            </else>
          </if>
        </then>
      </if>
    </for-each-resource-path>
    
    <!-- Packaged referenced utility projects into the WEB-INF/lib directory. -->
     
    <property name="webinflib" value="${staging.dir}/WEB-INF/lib"/>
    <mkdir dir="${webinflib}"/>
     
    <for-each-referenced-component>
      <if>
        <and>
          <equals arg1="${.referenced.component.type}" arg2="project"/>
          <equals arg1="${.referenced.component.target.path}" arg2="WEB-INF/lib"/>
        </and>
        <then>
          <antex
            antfile="${.referenced.component.handle}/build.xml"
            dir="${.referenced.component.handle}"
            target="archive"
            inheritUserProps="false"
            inheritAll="false"
            inheritRefs="false">
            <property name="wl.home" value="${wl.home}"/>
            <property name="patch.home" value="${patch.home}"/>
            <property name="workspace" value="${workspace}"/>
            <property name="init.typedefs.executed" value="true"/>
            <property name="archive.dir" value="${webinflib}"/>
          </antex>
        </then>
      </if>
    </for-each-referenced-component>
    
    <copy todir="${staging.dir}/${xbean.deploy.prefix}">
      <fileset dir="${xbean.bin.output.dir}"/>
    </copy>
    
    <if>
      <available file="${generated.module.root}"/>
      <then>
        <copy todir="${staging.dir}" overwrite="true">
          <fileset dir="${generated.module.root}"/>
        </copy>
      </then>
    </if>
    
    <taskdef name="build-manifests"
             classname="weblogic.ant.taskdefs.build.AnnotationManifestTask"
             onerror="fail" />
    
    <path id="annotation.manifest.search.path">
      <fileset dir="${staging.dir}">
        <include name="WEB-INF/lib/*.jar"/>
      </fileset>
      <pathelement location="${staging.dir}/WEB-INF/classes"/>
    </path>
    
    <path id="annotation.manifest.class.path">
      <path refid="annotation.manifest.search.path"/>
      <path refid="java.classpath"/>
    </path>
    
    <build-manifests moduleDir="${staging.dir}"
                     searchClasspathRef="annotation.manifest.search.path"
                     classpathRef="annotation.manifest.class.path"
                     verbose="true"
                     version=""
                     stagingDir="${java.io.tmpdir}/.manifest"/>
    
  </target>
  
  <target name="archive" depends="stage" description=" creates an archive containing all projects's resources and build artifacts; archive name and location can be overridden via the &quot;archive.path&quot; property">
    
    <property name="archive.dir" value="${project.dir}"/>
    <mkdir dir="${archive.dir}"/>
     
    <zip destfile="${archive.dir}/${archive.name}" encoding="UTF8" whenempty="create">
      <fileset dir="${staging.dir}"/>
    </zip>
    
  </target>
  
  <target name="stage.to.ear" depends="init">
    
    <if>
      <available file="${process.componentbeans.output.dir}"/>
      <then>
        <antcall target="wliassembly" inheritAll="true" inheritRefs="true" > 
          <param name="ear.root" value="${ear.staging.dir}"/> 
        </antcall> 
      </then>
    </if>
    
    <property name="prefix" value=""/>
     
    <antcallex target="archive" inheritUserProps="false" inheritAll="false" inheritRefs="false">
      <param name="wl.home" value="${wl.home}"/>
      <param name="patch.home" value="${patch.home}"/>
      <param name="workspace" value="${workspace}"/>
      <param name="init.typedefs.executed" value="true"/>
      <param name="archive.dir" value="${ear.staging.dir}${prefix}"/>
      <param name="ear.staging.dir" value="${ear.staging.dir}"/>
    </antcallex>
    
    <mkdir dir="${ear.staging.dir}/${process.projectbeans.name}"/>
    <mkdir dir="${ear.staging.dir}/${process.componentbeans.name}"/>
    <if>
      <available file="${process.componentbeans.output.dir}"/>
      <then>
        <copy todir="${ear.staging.dir}/${process.componentbeans.name}">
          <fileset dir="${process.componentbeans.output.dir}"/>
        </copy>
      </then>
    </if>
    <if>
      <available file="${process.projectbeans.output.dir}"/>
      <then>
        <copy todir="${ear.staging.dir}/${process.projectbeans.name}">
          <fileset dir="${process.projectbeans.output.dir}"/>
        </copy>
      </then>
    </if>
    
  </target>
  
  <target name="wliassembly" depends="init">
    
    <taskdef name="wliassemble" 
        classname="com.bea.control.assembly.AssembleTask"  
        classpathref="java.classpath" 
        onerror="report" /> 
    
    <property name="wliassembly.src" value="${project.dir}/build/assembly/.src"/>
    <property name="wliassembly.module.root" value="${process.componentbeans.output.dir}"/>
    <property name="wliassembly.src.output" value="${java.src.0.output}"/>
    
    <mkdir dir="${wliassembly.src}"/>
    
    <path id="wliassembly.classpath">
         <path refid="java.classpath" />
         <pathelement location="${wliassembly.src.output}" />
         <pathelement path="${java.outpath}" />
         <pathelement path="${java.sourcepath}"/>
    </path>
    
    <wliassemble 
        moduleDir="${wliassembly.module.root}" 
        moduleName="${project.name}" 
        srcOutputDir="${wliassembly.src}"
        appRootDir="${ear.root}">
    
        <assemblyContext factory="org.apache.beehive.controls.runtime.assembly.EJBAssemblyContext$Factory" />
        <classpath refid="wliassembly.classpath" />
        <fileset dir="${project.dir}">
            <include name="**/*.controls.properties" />
        </fileset>
    </wliassemble>
    <apt
      srcdir="${wliassembly.src}"
      preprocessdir="${apt.src.output.dir}"
      factorypathref="apt.factory.path"
      options="${apt.options}"
      compile="false">
        <classpath refid="wliassembly.classpath" />
    </apt>
     
    <javac
      srcdir="${wliassembly.src}"
      destdir="${wliassembly.src.output}"
      debug="on">
        <classpath refid="wliassembly.classpath" />
    </javac>
    
  </target>
  
  <target name="generated.root.init" depends="init">
    
    <property name="generated.module.root" value="${project.dir}/build/weboutput"/>
    
  </target>
  
  <target name="assembly" depends="init,generated.root.init">
    
    <taskdef name="assemble" 
        classname="com.bea.control.assembly.AssembleTask"  
        classpathref="java.classpath" 
        onerror="report" /> 
    
    <property name="assembly.src.output" value="${java.src.0.output}"/>
    <mkdir dir="${assembly.src}"/>
    
    <path id="assembly.classpath">
         <path refid="java.classpath" />
         <pathelement location="${assembly.src.output}" />
         <pathelement path="${java.outpath}" />
         <pathelement path="${java.sourcepath}"/>
    </path>
    
    <assemble 
        moduleDir="${generated.module.root}" 
        moduleName="${project.name}" 
        srcOutputDir="${assembly.src}"
        appRootDir="${ear.root}">
    
        <assemblyContext factory="org.apache.beehive.controls.runtime.assembly.WebAppAssemblyContext$Factory" />
        <assemblyContext factory="org.apache.beehive.controls.runtime.assembly.AppAssemblyContext$Factory" />
        <classpath refid="assembly.classpath" />
        <fileset dir="${project.dir}">
            <include name="**/*.controls.properties" />
        </fileset>
    </assemble>
    
    <apt
      srcdir="${assembly.src}"
      preprocessdir="${apt.src.output.dir}"
      factorypathref="apt.factory.path"
      options="${apt.options}"
      compile="false">
        <classpath refid="assembly.classpath" />
    </apt>
     
    <javac
      srcdir="${assembly.src}"
      destdir="${assembly.src.output}"
      debug="on">
        <classpath refid="assembly.classpath" />
    </javac>
    
  </target>
  
  <target name="webservice.build" depends="init,generated.root.init">
    
    <path id="jwsc.srcpath">
      <path path="${java.sourcepath}" />
      <pathelement path="build/assembly/.src" />
    </path>
    
    <taskdef name="jwsc" classname="weblogic.wsee.tools.anttasks.JwscTask" />
    
    <property name="jwsc.module.root" value="${project.dir}/build/weboutput"/>
    
    <property name="jwsc.contextpath" value="NETClienteWLIWeb"/>
    
    <property name="jwsc.srcpath.prop" refid="jwsc.srcpath"/>
    
    <path id="jwsc.classpath">
      <path refid="java.classpath" />
      <pathelement path="${java.outpath}" />
    </path>
    
    <jwsc 
        destdir="${project.dir}/build"
        classpathref="jwsc.classpath"
        >
      <module name="weboutput" explode="true" contextPath="${jwsc.contextpath}">
          <jwsFileSet srcdir="${jwsc.srcpath.prop}"> 
            <include name="**/*.java"/> 
          </jwsFileSet> 
        <descriptor file="${jwsc.module.root}/WEB-INF/web.xml" />
        <descriptor file="${jwsc.module.root}/WEB-INF/weblogic.xml" />
      </module>
    </jwsc>
    
  </target>
  
</project>
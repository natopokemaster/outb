xquery version "1.0" encoding "UTF-8";



(::pragma  xds <x:xds targetType="sch:Faturas" xmlns:x="urn:annotations.ld.bea.com" xmlns:sch="http://www.netservicos.com.br/Fatura/schemas/">

    <creationDate>2010-03-19T15:33:12</creationDate>

    <userDefinedView/>

</x:xds>::)







import schema namespace not="http://www.netservicos.com.br/NotaFiscal" at "ld:br/com/netservicos/atendimento/fatura/schemas/NotaFiscal.xsd";

declare namespace bus= "ld:br/com/netservicos/atendimento/fatura/physical/netsms/table/CriticaPagamentoDSP";

declare namespace snd= "ld:br/com/netservicos/atendimento/fatura/physical/netsms/table/SnDadosArquivoRetornoDSP";



declare namespace snc3= "ld:br/com/netservicos/atendimento/fatura/physical/netsms/table/SnCobrancaNotaFiscalDSP";



declare namespace snc2= "ld:br/com/netservicos/atendimento/fatura/physical/netsms/table/SnCobrancaDSP";



declare namespace snc1= "ld:br/com/netservicos/atendimento/fatura/physical/netsms/table/SnCobrancaParceiroDSP";



declare namespace sns= "ld:br/com/netservicos/atendimento/fatura/physical/netsms/table/SnSituacaoBoletoDSP";



declare namespace snr= "ld:br/com/netservicos/atendimento/fatura/physical/netsms/table/SnRelCobrancaBoletoDSP";



declare namespace snc= "ld:br/com/netservicos/atendimento/fatura/physical/netsms/table/SnCrnoCobrancaInadimplenteDSP";



declare namespace snb= "ld:br/com/netservicos/atendimento/fatura/physical/netsms/table/SnBoletoDSP";



declare namespace par= "ld:br/com/netservicos/atendimento/now/logical/entity/ParametroDSL";



import schema namespace param="http://www.netservicos.com.br/Parametro/schemas" at "ld:br/com/netservicos/atendimento/fatura/schemas/Parametro.xsd";



import schema namespace nsx="http://www.netservicos.com.br/Fatura/schemas/" at "ld:br/com/netservicos/atendimento/fatura/schemas/Fatura.xsd";

import schema namespace ns1="ld:br/com/netservicos/atendimento/fatura/physical/netsms/sql/CriticaPagamentoDSP" at "ld:br/com/netservicos/atendimento/fatura/physical/netsms/table/schemas/CriticaPagamento.xsd";


declare namespace tns="ld:br/com/netservicos/atendimento/fatura/logical/entity/FaturaCriticaDSL";



(::pragma  function <f:function kind="read" visibility="public" isPrimary="true" xmlns:f="urn:annotations.ld.bea.com"/>::)



declare function tns:listarFaturasContrato($numeroContrato as xs:long, $identificacaoCidade as xs:string, $identificadorCanalAtendimento as xs:long, $quantidadeFaturas as xs:int?, $dataInicio as xs:date?, $dataFim as xs:date?) as element(nsx:Faturas)? {

				

				<nsx:Faturas>

                        {

                        	let $itens :=      

                        	if(not(fn:empty($dataInicio)) and not(fn:empty($dataFim))) then    

                        	               	

                            for $SnBoletoDSP in snb:SnBoletoDSP()

                            for $SnSituacaoBoletoDSP in sns:SnSituacaoBoletoDSP()

                            where $SnSituacaoBoletoDSP/ID_SITUACAO_BOLETO eq $SnBoletoDSP/ID_SITUACAO_BOLETO

                            and $SnBoletoDSP/CID_CONTRATO eq $identificacaoCidade

                            and $SnBoletoDSP/NUM_CONTRATO eq $numeroContrato

                            and fn-bea:date-from-dateTime(fn:data($SnBoletoDSP/DT_DOCUMENTO)) <= $dataFim

                            and fn-bea:date-from-dateTime(fn:data($SnBoletoDSP/DT_DOCUMENTO)) >= $dataInicio

                            and (fn:upper-case($SnBoletoDSP/ST_IMPRESSO) eq 'S' or  fn:upper-case($SnBoletoDSP/ST_IMPRESSO) eq 'N')                          

                            order by $SnBoletoDSP/DT_VENCIMENTO descending

                           

                            return   

                            		<nsx:Fatura>

                                		<nsx:identificadorFatura?>{fn:data($SnBoletoDSP/ID_BOLETO)}</nsx:identificadorFatura>

                                		<nsx:valorFatura?>{fn:data($SnBoletoDSP/VL_DOCUMENTO)}</nsx:valorFatura>

                                		<nsx:dataVencimento?>{fn-bea:date-from-dateTime(fn:data($SnBoletoDSP/DT_VENCIMENTO))}</nsx:dataVencimento>

		                                <nsx:dataCancelamento?>{fn-bea:date-from-dateTime(fn:data($SnBoletoDSP/DT_CANCELAMENTO))}</nsx:dataCancelamento>

		                                <nsx:dataPagamento?>{fn-bea:date-from-dateTime(fn:data($SnBoletoDSP/DT_PAGAMENTO))}</nsx:dataPagamento>		                                                                		

                                		<nsx:dataDocumento?>{fn-bea:date-from-dateTime(fn:data($SnBoletoDSP/DT_DOCUMENTO))}</nsx:dataDocumento>

                                		<nsx:flagEmpresaCobranca?>{tns:verificarEmpresaCobranca($SnBoletoDSP/ID_BOLETO)}</nsx:flagEmpresaCobranca>

                                		<nsx:flagPagavel?>{tns:verificarFaturaPagavel($SnBoletoDSP, $identificadorCanalAtendimento)}</nsx:flagPagavel>

                                			

                                		{

                                    	 <nsx:SituacaoFatura?>

                                        	<nsx:identificador?>{fn:data($SnBoletoDSP/ID_SITUACAO_BOLETO)}</nsx:identificador>

                                        	<nsx:descricao?>{fn:data($SnSituacaoBoletoDSP/DS_DESCRICAO)}</nsx:descricao>

                                    	 </nsx:SituacaoFatura>

                                		}

                                	                              	     

                                   		{

                                   		  <nsx:NotasFiscais?> 

                                    	  {   

                                    		if(fn:not(fn:empty($SnBoletoDSP/ID_BOLETO))) then(

                                    	  		let $notasFiscais := tns:consultarNotasFiscais($SnBoletoDSP/ID_BOLETO)

                                    	  		for $notaFiscal in $notasFiscais

                                	     	 	return                                	                                    	  

                                        		<nsx:numeroNotaFiscal?>{fn:data($notaFiscal/not:numeroNotaFiscal)}</nsx:numeroNotaFiscal>                                        	                                          

                                          	)else()

                                    	  }

                                    	  </nsx:NotasFiscais>  

                                	     }

                                	    <nsx:FormaPagamentoEnum?>{xs:string(fn:data($SnBoletoDSP/ID_TIPO_COBRANCA)) }</nsx:FormaPagamentoEnum>

                                	    <nsx:codigoBarras?>{fn:data($SnBoletoDSP/CC_CODIGO_BARRA)}</nsx:codigoBarras>

                                		<nsx:linhaDigitavel?>{fn:data($SnBoletoDSP/CC_LINHA_DIGITAVEL)}</nsx:linhaDigitavel>        

					                     { 
            								for $numeroPortado in bus:criticaPagamentoPorContrato($SnBoletoDSP/ID_BOLETO)
            								where $numeroPortado/codigoCritica ge 0
             								return
					                    <nsx:criticaPagamento?>
					                        <nsx:codigoCritica?>{fn:data($numeroPortado/codigoCritica)}</nsx:codigoCritica>
					                        <nsx:mensagemCritica?>{fn:data($numeroPortado/mensagemCritica)}</nsx:mensagemCritica>
					                        <nsx:dataCritica?>{fn:data($numeroPortado/dataCritica)}</nsx:dataCritica>
					                    </nsx:criticaPagamento>

                       					}

                            	</nsx:Fatura>  

                            	

                            	else if(fn:empty($dataInicio) and not(fn:empty($dataFim))) then   

                            		for $SnBoletoDSP in snb:SnBoletoDSP()

		                            for $SnSituacaoBoletoDSP in sns:SnSituacaoBoletoDSP()

		                            where $SnSituacaoBoletoDSP/ID_SITUACAO_BOLETO eq $SnBoletoDSP/ID_SITUACAO_BOLETO

		                            and $SnBoletoDSP/CID_CONTRATO eq $identificacaoCidade

		                            and $SnBoletoDSP/NUM_CONTRATO eq $numeroContrato

		                            and fn-bea:date-from-dateTime(fn:data($SnBoletoDSP/DT_DOCUMENTO)) le $dataFim		                            

		                            and (fn:upper-case($SnBoletoDSP/ST_IMPRESSO) eq 'S' or  fn:upper-case($SnBoletoDSP/ST_IMPRESSO) eq 'N')

		                            order by $SnBoletoDSP/DT_VENCIMENTO descending

		                           

		                            return   

		                            		<nsx:Fatura>

		                                		<nsx:identificadorFatura?>{fn:data($SnBoletoDSP/ID_BOLETO)}</nsx:identificadorFatura>

		                                		<nsx:valorFatura?>{fn:data($SnBoletoDSP/VL_DOCUMENTO)}</nsx:valorFatura>

		                                		<nsx:dataVencimento?>{fn-bea:date-from-dateTime(fn:data($SnBoletoDSP/DT_VENCIMENTO))}</nsx:dataVencimento>

		                                		<nsx:dataCancelamento?>{fn-bea:date-from-dateTime(fn:data($SnBoletoDSP/DT_CANCELAMENTO))}</nsx:dataCancelamento>		                                		

				                                <nsx:dataPagamento?>{fn-bea:date-from-dateTime(fn:data($SnBoletoDSP/DT_PAGAMENTO))}</nsx:dataPagamento>

                                				<nsx:dataDocumento?>{fn-bea:date-from-dateTime(fn:data($SnBoletoDSP/DT_DOCUMENTO))}</nsx:dataDocumento>

		                                		<nsx:flagEmpresaCobranca?>{tns:verificarEmpresaCobranca($SnBoletoDSP/ID_BOLETO)}</nsx:flagEmpresaCobranca>

		                                		<nsx:flagPagavel?>{tns:verificarFaturaPagavel($SnBoletoDSP, $identificadorCanalAtendimento)}</nsx:flagPagavel>

		                                		{

		                                    		<nsx:SituacaoFatura?>

		                                        		<nsx:identificador?>{fn:data($SnBoletoDSP/ID_SITUACAO_BOLETO)}</nsx:identificador>

		                                        		<nsx:descricao?>{fn:data($SnSituacaoBoletoDSP/DS_DESCRICAO)}</nsx:descricao>

		                                    		</nsx:SituacaoFatura>

		                                		}

		                                		{

                                   		     		<nsx:NotasFiscais?> 

                                    	      		{	   

                                    		    	if(fn:not(fn:empty($SnBoletoDSP/ID_BOLETO))) then(

                                    	  			 	let $notasFiscais := tns:consultarNotasFiscais($SnBoletoDSP/ID_BOLETO)

                                    	  		 		for $notaFiscal in $notasFiscais

                                	     	 	  		return                                	                                    	  

                                        		   		<nsx:numeroNotaFiscal?>{fn:data($notaFiscal/not:numeroNotaFiscal)}</nsx:numeroNotaFiscal>                                        	                                          

                                          	   		)else()

                                    	  		}

                                    	 			</nsx:NotasFiscais>  

                                	    		}

		                                		<nsx:FormaPagamentoEnum?>{xs:string(fn:data($SnBoletoDSP/ID_TIPO_COBRANCA)) }</nsx:FormaPagamentoEnum>

		                                		<nsx:codigoBarras?>{fn:data($SnBoletoDSP/CC_CODIGO_BARRA)}</nsx:codigoBarras>

		                                		<nsx:linhaDigitavel?>{fn:data($SnBoletoDSP/CC_LINHA_DIGITAVEL)}</nsx:linhaDigitavel>
		                                		
					                     { 
            								for $numeroPortado in bus:criticaPagamentoPorContrato($SnBoletoDSP/ID_BOLETO)
            								where $numeroPortado/codigoCritica ge 0
             								return
					                    <nsx:criticaPagamento?>
					                        <nsx:codigoCritica?>{fn:data($numeroPortado/codigoCritica)}</nsx:codigoCritica>
					                        <nsx:mensagemCritica?>{fn:data($numeroPortado/mensagemCritica)}</nsx:mensagemCritica>
					                        <nsx:dataCritica?>{fn:data($numeroPortado/dataCritica)}</nsx:dataCritica>
					                    </nsx:criticaPagamento>

                       					}
	   


		                            	</nsx:Fatura> 

		                            	

		                            	

		                        else if(fn:empty($dataFim) and not(fn:empty($dataInicio))) then   

                            		for $SnBoletoDSP in snb:SnBoletoDSP()

		                            for $SnSituacaoBoletoDSP in sns:SnSituacaoBoletoDSP()

		                            where $SnSituacaoBoletoDSP/ID_SITUACAO_BOLETO eq $SnBoletoDSP/ID_SITUACAO_BOLETO

		                            and $SnBoletoDSP/CID_CONTRATO eq $identificacaoCidade

		                            and $SnBoletoDSP/NUM_CONTRATO eq $numeroContrato

		                            and fn-bea:date-from-dateTime(fn:data($SnBoletoDSP/DT_DOCUMENTO)) ge $dataInicio		                            

		                            and (fn:upper-case($SnBoletoDSP/ST_IMPRESSO) eq 'S' or  fn:upper-case($SnBoletoDSP/ST_IMPRESSO) eq 'N')

		                            order by $SnBoletoDSP/DT_VENCIMENTO descending

		                           

		                            return   

		                            		<nsx:Fatura>

		                                		<nsx:identificadorFatura?>{fn:data($SnBoletoDSP/ID_BOLETO)}</nsx:identificadorFatura>

		                                		<nsx:valorFatura?>{fn:data($SnBoletoDSP/VL_DOCUMENTO)}</nsx:valorFatura>

		                                		<nsx:dataVencimento?>{fn-bea:date-from-dateTime(fn:data($SnBoletoDSP/DT_VENCIMENTO))}</nsx:dataVencimento>

		                                		<nsx:dataCancelamento?>{fn-bea:date-from-dateTime(fn:data($SnBoletoDSP/DT_CANCELAMENTO))}</nsx:dataCancelamento>		                                		

				                                <nsx:dataPagamento?>{fn-bea:date-from-dateTime(fn:data($SnBoletoDSP/DT_PAGAMENTO))}</nsx:dataPagamento>

		                                		<nsx:dataDocumento?>{fn-bea:date-from-dateTime(fn:data($SnBoletoDSP/DT_DOCUMENTO))}</nsx:dataDocumento>		                                		

		                                		<nsx:flagEmpresaCobranca?>{tns:verificarEmpresaCobranca($SnBoletoDSP/ID_BOLETO)}</nsx:flagEmpresaCobranca>

		                                		<nsx:flagPagavel?>{tns:verificarFaturaPagavel($SnBoletoDSP, $identificadorCanalAtendimento)}</nsx:flagPagavel>

		                                		{

		                                    		<nsx:SituacaoFatura?>

		                                        	<nsx:identificador?>{fn:data($SnBoletoDSP/ID_SITUACAO_BOLETO)}</nsx:identificador>

		                                        	<nsx:descricao?>{fn:data($SnSituacaoBoletoDSP/DS_DESCRICAO)}</nsx:descricao>

		                                    	 </nsx:SituacaoFatura>

		                                	    }

		                                	    {

                                   		         <nsx:NotasFiscais?> 

                                    	          {   

                                    		        if(fn:not(fn:empty($SnBoletoDSP/ID_BOLETO))) then(

                                    	  		     let $notasFiscais := tns:consultarNotasFiscais($SnBoletoDSP/ID_BOLETO)

                                    	  		     for $notaFiscal in $notasFiscais

                                	     	 	     return                                	                                    	  

                                        		     <nsx:numeroNotaFiscal?>{fn:data($notaFiscal/not:numeroNotaFiscal)}</nsx:numeroNotaFiscal>                                        	                                          

                                          	        )else()

                                    	          }

                                    	         </nsx:NotasFiscais>  

                                	             }

		                                		<nsx:FormaPagamentoEnum?>{xs:string(fn:data($SnBoletoDSP/ID_TIPO_COBRANCA)) }</nsx:FormaPagamentoEnum>

		                                		<nsx:codigoBarras?>{fn:data($SnBoletoDSP/CC_CODIGO_BARRA)}</nsx:codigoBarras>

		                                		<nsx:linhaDigitavel?>{fn:data($SnBoletoDSP/CC_LINHA_DIGITAVEL)}</nsx:linhaDigitavel>		                                		
		                                		
					                     { 
            								for $numeroPortado in bus:criticaPagamentoPorContrato($SnBoletoDSP/ID_BOLETO)
											where $numeroPortado/codigoCritica ge 0
             								return
					                    <nsx:criticaPagamento?>
					                        <nsx:codigoCritica?>{fn:data($numeroPortado/codigoCritica)}</nsx:codigoCritica>
					                        <nsx:mensagemCritica?>{fn:data($numeroPortado/mensagemCritica)}</nsx:mensagemCritica>
					                        <nsx:dataCritica?>{fn:data($numeroPortado/dataCritica)}</nsx:dataCritica>
					                    </nsx:criticaPagamento>

                       					}
	   

		                            		</nsx:Fatura>

		                            	

		                            	

		                        

		                        else if(fn:empty($dataFim) and fn:empty($dataInicio)) then   

                            		for $SnBoletoDSP in snb:SnBoletoDSP()

		                            for $SnSituacaoBoletoDSP in sns:SnSituacaoBoletoDSP()

		                            where $SnSituacaoBoletoDSP/ID_SITUACAO_BOLETO eq $SnBoletoDSP/ID_SITUACAO_BOLETO

		                            and $SnBoletoDSP/CID_CONTRATO eq $identificacaoCidade

		                            and $SnBoletoDSP/NUM_CONTRATO eq $numeroContrato		                           

		                            and (fn:upper-case($SnBoletoDSP/ST_IMPRESSO) eq 'S' or  fn:upper-case($SnBoletoDSP/ST_IMPRESSO) eq 'N')

		                            order by $SnBoletoDSP/DT_VENCIMENTO descending

		                           

		                            return   

		                            		<nsx:Fatura>

		                                		<nsx:identificadorFatura?>{fn:data($SnBoletoDSP/ID_BOLETO)}</nsx:identificadorFatura>

		                                		<nsx:valorFatura?>{fn:data($SnBoletoDSP/VL_DOCUMENTO)}</nsx:valorFatura>

		                                		<nsx:dataVencimento?>{fn-bea:date-from-dateTime(fn:data($SnBoletoDSP/DT_VENCIMENTO))}</nsx:dataVencimento>

		                                		<nsx:dataCancelamento?>{fn-bea:date-from-dateTime(fn:data($SnBoletoDSP/DT_CANCELAMENTO))}</nsx:dataCancelamento>		                                		

				                                <nsx:dataPagamento?>{fn-bea:date-from-dateTime(fn:data($SnBoletoDSP/DT_PAGAMENTO))}</nsx:dataPagamento>

		                                		<nsx:dataDocumento?>{fn-bea:date-from-dateTime(fn:data($SnBoletoDSP/DT_DOCUMENTO))}</nsx:dataDocumento>		                                		

		                                		<nsx:flagEmpresaCobranca?>{tns:verificarEmpresaCobranca($SnBoletoDSP/ID_BOLETO)}</nsx:flagEmpresaCobranca>

		                                		<nsx:flagPagavel?>{tns:verificarFaturaPagavel($SnBoletoDSP, $identificadorCanalAtendimento)}</nsx:flagPagavel>

		                                		{

		                                    		<nsx:SituacaoFatura?>

		                                        	 <nsx:identificador?>{fn:data($SnBoletoDSP/ID_SITUACAO_BOLETO)}</nsx:identificador>

		                                        	 <nsx:descricao?>{fn:data($SnSituacaoBoletoDSP/DS_DESCRICAO)}</nsx:descricao>

		                                    	    </nsx:SituacaoFatura>

		                                	     }

                                    	 		 {

                                   		 			<nsx:NotasFiscais?> 

                                    	 			{   

                                    					if(fn:not(fn:empty($SnBoletoDSP/ID_BOLETO))) then(

                                    	  					let $notasFiscais := tns:consultarNotasFiscais($SnBoletoDSP/ID_BOLETO)

                                    	  					for $notaFiscal in $notasFiscais

                                	     	 				return                                	                                    	  

                                        					<nsx:numeroNotaFiscal?>{fn:data($notaFiscal/not:numeroNotaFiscal)}</nsx:numeroNotaFiscal>                                        	                                          

                                          				)else()

                                    	  			}

                                    	 			</nsx:NotasFiscais>  

                                	    		}

		                                		<nsx:FormaPagamentoEnum?>{xs:string(fn:data($SnBoletoDSP/ID_TIPO_COBRANCA)) }</nsx:FormaPagamentoEnum>

		                                		<nsx:codigoBarras?>{fn:data($SnBoletoDSP/CC_CODIGO_BARRA)}</nsx:codigoBarras>

		                                		<nsx:linhaDigitavel?>{fn:data($SnBoletoDSP/CC_LINHA_DIGITAVEL)}</nsx:linhaDigitavel>		                                		
		                                		
					                     { 
            								for $numeroPortado in bus:criticaPagamentoPorContrato($SnBoletoDSP/ID_BOLETO)
            								where $numeroPortado/codigoCritica ge 0
             								return
					                    <nsx:criticaPagamento?>
					                        <nsx:codigoCritica?>{fn:data($numeroPortado/codigoCritica)}</nsx:codigoCritica>
					                        <nsx:mensagemCritica?>{fn:data($numeroPortado/mensagemCritica)}</nsx:mensagemCritica>
					                        <nsx:dataCritica?>{fn:data($numeroPortado/dataCritica)}</nsx:dataCritica>
					                    </nsx:criticaPagamento>

                       					}

		                            		</nsx:Fatura>  

		                        else()

		                          

                            		

	                            	                	

                            	return

									if (fn:empty($quantidadeFaturas)) then

										$itens

									else

										subsequence($itens, 1, $quantidadeFaturas)



                            	                            

                        }

                    </nsx:Faturas>  

                            	

                            	

                         

    



};







declare function tns:verificarEmpresaCobranca($idBoleto as xs:integer) as xs:boolean{



     let $flag :=

	 for $SnCrnoCobrancaInadimplenteDSP in snc:SnCrnoCobrancaInadimplenteDSP()

	 for $SnRelCobrancaBoletoDSP in snr:SnRelCobrancaBoletoDSP()

	 where ($SnCrnoCobrancaInadimplenteDSP/ID_COBRANCA eq $SnRelCobrancaBoletoDSP/ID_COBRANCA 

	 or $SnCrnoCobrancaInadimplenteDSP/ID_COBRANCA_PARCEIRO eq $SnRelCobrancaBoletoDSP/ID_COBRANCA_PARCEIRO)

	 and $idBoleto eq $SnRelCobrancaBoletoDSP/ID_BOLETO

	 and fn-bea:date-from-dateTime(fn:data($SnCrnoCobrancaInadimplenteDSP/DT_FIM_INADIMPLENCIA)) > fn:current-date()

	 and fn:upper-case($SnCrnoCobrancaInadimplenteDSP/FC_SISTEMA_COBRANCA) eq 'S'

	 return

	  subsequence($SnRelCobrancaBoletoDSP/ID_BOLETO, 1, 1)	 



	 return 

	 if(fn:not(fn:empty($flag)))then

	 	true()

	 else 

	 	false()

};



declare function tns:verificarFaturaPagavel($SnBoletoDSP as element (snb:SnBoletoDSP), $identificadorCanalAtendimento as xs:long) as xs:boolean{



  	let $NOME_PARAMETRO := concat("CANAL_ATENDIMENTO_", xs:string($identificadorCanalAtendimento))
    
    let $PARAMETRO := par:buscarParametroPorNomeECidade($NOME_PARAMETRO,$SnBoletoDSP/CID_CONTRATO)

	let $TIPO_COBRANCA_BOLETO := 1

	let $TIPO_COBRANCA_DCC := 2

	let $TIPO_COBRANCA_CC := 3



	let $SITUACAO_BOLETO_PAG := 1

	let $SITUACAO_BOLETO_RJCART := 15  

    return

    

    if(xs:string($PARAMETRO/param:valorParametroString) eq xs:string($identificadorCanalAtendimento))then

		if($SnBoletoDSP/ID_TIPO_COBRANCA eq $TIPO_COBRANCA_BOLETO

			and ($SnBoletoDSP/ID_SITUACAO_BOLETO eq $SITUACAO_BOLETO_PAG or $SnBoletoDSP/ID_SITUACAO_BOLETO eq $SITUACAO_BOLETO_RJCART)

			and not(tns:verificarEmpresaCobranca($SnBoletoDSP/ID_BOLETO))

			and (tns:verificarSituacaoCobranca($SnBoletoDSP/ID_BOLETO) or tns:verificarSituacaoCobrancaParceiro($SnBoletoDSP/ID_BOLETO))) then

		                                				

			true()

		                                				

		else if ($SnBoletoDSP/ID_TIPO_COBRANCA eq $TIPO_COBRANCA_DCC

			and ($SnBoletoDSP/ID_SITUACAO_BOLETO eq $SITUACAO_BOLETO_PAG or $SnBoletoDSP/ID_SITUACAO_BOLETO eq $SITUACAO_BOLETO_RJCART)

			and fn-bea:date-from-dateTime(fn:data($SnBoletoDSP/DT_VENCIMENTO)) < fn:current-date()

			and not(tns:verificarEmpresaCobranca($SnBoletoDSP/ID_BOLETO))

			and (tns:verificarSituacaoCobranca($SnBoletoDSP/ID_BOLETO) or tns:verificarSituacaoCobrancaParceiro($SnBoletoDSP/ID_BOLETO))

			and tns:verificarRetornoBancario($SnBoletoDSP/ID_BOLETO)) then

			

			true()

						                            				

		else

		    false()

    else 

		false()

};



(::pragma  function <f:function kind="read" visibility="public" isPrimary="false" xmlns:f="urn:annotations.ld.bea.com"/>::)



declare function tns:listarFaturasContratoPagaveis($numeroContrato as xs:long, $identificacaoCidade as xs:string, $identificadorCanalAtendimento as xs:long) as element(nsx:Faturas)? {

    <nsx:Faturas>

        {

            				for $SnBoletoDSP in snb:SnBoletoDSP()

                            for $SnSituacaoBoletoDSP in sns:SnSituacaoBoletoDSP()

                            where $SnSituacaoBoletoDSP/ID_SITUACAO_BOLETO eq $SnBoletoDSP/ID_SITUACAO_BOLETO

                            and $SnBoletoDSP/CID_CONTRATO eq $identificacaoCidade

                            and $SnBoletoDSP/NUM_CONTRATO eq $numeroContrato                           

                            and fn:upper-case($SnBoletoDSP/ST_IMPRESSO) eq 'S'

                            and tns:verificarFaturaPagavel($SnBoletoDSP, $identificadorCanalAtendimento)

                            order by $SnBoletoDSP/DT_DOCUMENTO descending

                           

                            return   

                            		<nsx:Fatura>

                                		<nsx:identificadorFatura?>{fn:data($SnBoletoDSP/ID_BOLETO)}</nsx:identificadorFatura>

                                		<nsx:valorFatura?>{fn:data($SnBoletoDSP/VL_DOCUMENTO)}</nsx:valorFatura>

                                		<nsx:dataVencimento?>{fn-bea:date-from-dateTime(fn:data($SnBoletoDSP/DT_VENCIMENTO))}</nsx:dataVencimento>

										<nsx:dataCancelamento?>{fn-bea:date-from-dateTime(fn:data($SnBoletoDSP/DT_CANCELAMENTO))}</nsx:dataCancelamento>

		                                <nsx:dataPagamento?>{fn-bea:date-from-dateTime(fn:data($SnBoletoDSP/DT_PAGAMENTO))}</nsx:dataPagamento>                                		

                                		<nsx:flagEmpresaCobranca?>{tns:verificarEmpresaCobranca($SnBoletoDSP/ID_BOLETO)}</nsx:flagEmpresaCobranca>

                                		<nsx:flagPagavel?>{fn:true()}</nsx:flagPagavel>

                                			

                                		{

                                    		<nsx:SituacaoFatura?>

                                        	<nsx:identificador?>{fn:data($SnBoletoDSP/ID_SITUACAO_BOLETO)}</nsx:identificador>

                                        	<nsx:descricao?>{fn:data($SnSituacaoBoletoDSP/DS_DESCRICAO)}</nsx:descricao>

                                    	</nsx:SituacaoFatura>

                                	}

                                	<nsx:FormaPagamentoEnum?>{xs:string(fn:data($SnBoletoDSP/ID_TIPO_COBRANCA)) }</nsx:FormaPagamentoEnum>

                                	<nsx:codigoBarras?>{fn:data($SnBoletoDSP/CC_CODIGO_BARRA)}</nsx:codigoBarras>

                                	<nsx:linhaDigitavel?>{fn:data($SnBoletoDSP/CC_LINHA_DIGITAVEL)}</nsx:linhaDigitavel>

                            	</nsx:Fatura>  

        }

    </nsx:Faturas>



};



declare function tns:verificarSituacaoCobranca($idBoleto as xs:long) as xs:boolean{



     let $flag :=

	 for $SnCobrancaDSP in snc2:SnCobrancaDSP()

	 for $SnRelCobrancaBoletoDSP in snr:SnRelCobrancaBoletoDSP()

	 where $SnCobrancaDSP/ID_COBRANCA eq $SnRelCobrancaBoletoDSP/ID_COBRANCA	

	 and $idBoleto eq $SnRelCobrancaBoletoDSP/ID_BOLETO

	 and $SnCobrancaDSP/ID_SIT_COBRANCA + 0 eq 10

	

	 return

	  subsequence($SnRelCobrancaBoletoDSP/ID_BOLETO, 1, 1)

	 



	 return 

	 if(fn:not(fn:empty($flag)))then

	 	true()

	 else 

	 	false()

};



declare function tns:verificarSituacaoCobrancaParceiro($idBoleto as xs:long) as xs:boolean{



     let $flag :=

	 for $SnCobrancaParceiroDSP in snc1:SnCobrancaParceiroDSP()

	 for $SnRelCobrancaBoletoDSP in snr:SnRelCobrancaBoletoDSP()

	 where $SnCobrancaParceiroDSP/ID_COBRANCA_PARCEIRO eq $SnRelCobrancaBoletoDSP/ID_COBRANCA_PARCEIRO	

	 and $idBoleto eq $SnRelCobrancaBoletoDSP/ID_BOLETO

	 and $SnCobrancaParceiroDSP/ID_SIT_COBRANCA + 0 eq 10

	

	 return

	  subsequence($SnRelCobrancaBoletoDSP/ID_BOLETO, 1, 1)

 

return 

	 if(fn:not(fn:empty($flag)))then

	 	true()

	 else 

	 	false()

};



(::pragma  function <f:function kind="library" visibility="private" isPrimary="false" xmlns:f="urn:annotations.ld.bea.com"/>::)



declare function tns:consultarNotasFiscais($idBoleto as xs:long) as element(not:NotaFiscal)*{

	

	for $SnRelCobrancaBoletoDSP in snr:SnRelCobrancaBoletoDSP() 

	where $SnRelCobrancaBoletoDSP/ID_BOLETO eq  $idBoleto

	for $SnCobrancaNotaFiscalDSP in snc3:SnCobrancaNotaFiscalDSP() 

	where( $SnCobrancaNotaFiscalDSP/ID_COBRANCA eq $SnRelCobrancaBoletoDSP/ID_COBRANCA) or( $SnCobrancaNotaFiscalDSP/ID_COBRANCA_PARCEIRO eq  $SnRelCobrancaBoletoDSP/ID_COBRANCA_PARCEIRO)

	order by $SnCobrancaNotaFiscalDSP/ID_PARCEIRO

	return

        <not:NotaFiscal>

            <not:numeroNotaFiscal?>{fn:data($SnCobrancaNotaFiscalDSP/NR_NOTA_FISCAL)}</not:numeroNotaFiscal>

        </not:NotaFiscal>

};



declare function tns:verificarRetornoBancario($idBoleto as xs:long) as xs:boolean{



     let $flag :=

     for $SnRelCobrancaBoletoDSP in snr:SnRelCobrancaBoletoDSP()

	 where $SnRelCobrancaBoletoDSP/ID_BOLETO eq $idBoleto

	 for $SnDadosArquivoRetornoDSP in snd:SnDadosArquivoRetornoDSP()

	

	 where (($SnDadosArquivoRetornoDSP/ID_COBRANCA eq $SnRelCobrancaBoletoDSP/ID_COBRANCA) or

		 ($SnDadosArquivoRetornoDSP/ID_COBRANCA_PARCEIRO eq $SnRelCobrancaBoletoDSP/ID_COBRANCA_PARCEIRO))

	 

	 return

	  subsequence($SnRelCobrancaBoletoDSP/ID_BOLETO, 1, 1)	 



	 return 

	 if(fn:not(fn:empty($flag)))then

	 	true()

	 else 

	 	false()

	 	

};



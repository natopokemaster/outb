xquery version "1.0" encoding "UTF-8";

(::pragma xfl <x:xfl xmlns:x="urn:annotations.ld.bea.com"><creationDate>2010-03-08T10:11:33</creationDate></x:xfl> ::)

import schema namespace snc="ld:br/com/netservicos/atendimento/contratovenda/physical/netsms/table/SnContratoDSP" at "ld:br/com/netservicos/atendimento/contratovenda/physical/netsms/table/schemas/SnContratoDSP.xsd";

declare namespace contrato= "ld:br/com/netservicos/atendimento/contratovenda/physical/netsms/table/SnContratoDSP";

declare namespace relMestreFiliado= "ld:br/com/netservicos/atendimento/contratocoletivo/physical/netsms/table/SnRelContratoMestreFiliadoDSP";

declare namespace assinante= "ld:br/com/netservicos/atendimento/clienteprospect/physical/netsms/table/SnAssinanteDSP";

import schema namespace ns1="http://www.netservicos.com.br/ContratoDeVenda/schemas" at "ld:br/com/netservicos/atendimento/contratocoletivo/schemas/ContratoDeVenda.xsd";

declare namespace tns="ld:br/com/netservicos/atendimento/contratocoletivo/logical/entity/ContratoColetivoDSL";

(::pragma  function <f:function kind="library" visibility="private" isPrimary="false" xmlns:f="urn:annotations.ld.bea.com"/>::)

declare xqse function tns:buscarContratoMestre($numeroContrato as xs:long, $identificacaoCidade as xs:string) as xs:long? {
	declare $tipoContrato as xs:integer := xs:integer(0);
	declare $numeroContratoMestre as xs:long := xs:long(0);
	
	try {
		set $tipoContrato := tns:buscarTipoContrato($numeroContrato, $identificacaoCidade);
	} catch (* into $err, $msg) {
		fn:error(xs:QName("DSP-ATEND-0017"), "Contrato não encontrado.");
	};
	
	if ($tipoContrato = 1) then {
		fn:error(xs:QName("DSP-ATEND-0016"), "Contrato informado não é coletivo.");
	};

	if ($tipoContrato = 2) then {
		set $numeroContratoMestre := $numeroContrato;
	};

	if ($tipoContrato = 3) then {
		try {
			set $numeroContratoMestre := tns:buscarContratoMestreFiliado($numeroContrato, $identificacaoCidade);
		} catch (* into $err, $msg) {
			fn:error(xs:QName("DSP-ATEND-0017"), "Contrato não encontrado.");
		};
	};
	return value $numeroContratoMestre;
};

(::pragma  function <f:function kind="library" visibility="public" isPrimary="false" xmlns:f="urn:annotations.ld.bea.com"/>::)

declare function tns:consultarMestre($numeroContrato as xs:long, $identificacaoCidade as xs:string) as element(ns1:contratoDeVenda)? {
	for $snAssinante in assinante:SnAssinanteDSP()
	for $snContrato in contrato:SnContratoDSP()
	where $snContrato/NUM_CONTRATO eq tns:buscarContratoMestre($numeroContrato, $identificacaoCidade)
	where $snContrato/CID_CONTRATO eq $identificacaoCidade
	where $snContrato/ID_ASSINANTE eq $snAssinante/ID_ASSINANTE
	return
		<ns1:contratoDeVenda>
		    <ns1:numeroContrato?>{ xs:long(fn:data($snContrato/NUM_CONTRATO)) }</ns1:numeroContrato>
		    <ns1:identificacaoCidade?>{ fn:data($snContrato/CID_CONTRATO) }</ns1:identificacaoCidade>
		    <ns1:identificacaoTipoContrato?>{ xs:long(fn:data($snContrato/ID_TIPO_CONTRATO)) }</ns1:identificacaoTipoContrato>
		    <ns1:descricaoTipoContrato?/>
		    {
		        <ns1:titular?>
		            <ns1:nomeTitular?>{ fn:data($snAssinante/NOME_TITULAR) }</ns1:nomeTitular>
		            {
		            	if ($snAssinante/ID_TIPO_PESSOA	eq 1) then
		            		<ns1:cpf?>{ fn:data($snAssinante/CPF) }</ns1:cpf>
		            	else
		            		<ns1:cnpj?>{ fn:data($snAssinante/CPF) }</ns1:cnpj>
		            }
		        </ns1:titular>
		    }
		</ns1:contratoDeVenda>
};

(::pragma  function <f:function kind="library" visibility="public" isPrimary="false" xmlns:f="urn:annotations.ld.bea.com"/>::)

declare function tns:listarContratosColetivos($numeroContrato as xs:long, $identificacaoCidade as xs:string) as element(ns1:contratosDeVenda){
    <ns1:contratosDeVenda>
        {
		for $snAssinante in assinante:SnAssinanteDSP()
		for $snContrato in contrato:SnContratoDSP()
		where $snContrato/ID_ASSINANTE eq $snAssinante/ID_ASSINANTE
		for $snRelContratoMestreFiliado in relMestreFiliado:SnRelContratoMestreFiliadoDSP()
		where $snRelContratoMestreFiliado/NUM_CONTRATO_FILIADO eq $snContrato/NUM_CONTRATO
		where $snRelContratoMestreFiliado/NUM_CONTRATO_MESTRE eq tns:buscarContratoMestre($numeroContrato, $identificacaoCidade)
		where $snRelContratoMestreFiliado/CID_CONTRATO eq $identificacaoCidade
		group by $snContrato/NUM_CONTRATO as $NUM_CONTRATO,
				 $snContrato/CID_CONTRATO as $CID_CONTRATO,
				 $snContrato/ID_TIPO_CONTRATO as $ID_TIPO_CONTRATO,
				 $snAssinante/NOME_TITULAR as $NOME_TITULAR,
				 $snAssinante/ID_TIPO_PESSOA as $ID_TIPO_PESSOA,
				 $snAssinante/CPF as $CPF
		return
			<ns1:contratoDeVenda>
			    <ns1:numeroContrato?>{ xs:long(fn:data($NUM_CONTRATO)) }</ns1:numeroContrato>
			    <ns1:identificacaoCidade?>{ fn:data($CID_CONTRATO) }</ns1:identificacaoCidade>
			    <ns1:identificacaoTipoContrato?>{ xs:long(fn:data($ID_TIPO_CONTRATO)) }</ns1:identificacaoTipoContrato>
			    <ns1:descricaoTipoContrato?/>
			    {
			        <ns1:titular?>
			            <ns1:nomeTitular?>{ fn:data($NOME_TITULAR) }</ns1:nomeTitular>
			            {
			            	if ($ID_TIPO_PESSOA	eq 1) then
			            		<ns1:cpf?>{ fn:data($CPF) }</ns1:cpf>
			            	else
			            		<ns1:cnpj?>{ fn:data($CPF) }</ns1:cnpj>
			            }
			        </ns1:titular>
			    }
			</ns1:contratoDeVenda>
        }
        {
		for $snAssinante in assinante:SnAssinanteDSP()
		for $snContrato in contrato:SnContratoDSP()
		where $snContrato/NUM_CONTRATO eq tns:buscarContratoMestre($numeroContrato, $identificacaoCidade)
		where $snContrato/CID_CONTRATO eq $identificacaoCidade
		where $snContrato/ID_ASSINANTE eq $snAssinante/ID_ASSINANTE
		return
			<ns1:contratoDeVenda>
			    <ns1:numeroContrato?>{ xs:long(fn:data($snContrato/NUM_CONTRATO)) }</ns1:numeroContrato>
			    <ns1:identificacaoCidade?>{ fn:data($snContrato/CID_CONTRATO) }</ns1:identificacaoCidade>
			    <ns1:identificacaoTipoContrato?>{ xs:long(fn:data($snContrato/ID_TIPO_CONTRATO)) }</ns1:identificacaoTipoContrato>
			    <ns1:descricaoTipoContrato?/>
			    {
			        <ns1:titular?>
			            <ns1:nomeTitular?>{ fn:data($snAssinante/NOME_TITULAR) }</ns1:nomeTitular>
			            {
			            	if ($snAssinante/ID_TIPO_PESSOA	eq 1) then
			            		<ns1:cpf?>{ fn:data($snAssinante/CPF) }</ns1:cpf>
			            	else
			            		<ns1:cnpj?>{ fn:data($snAssinante/CPF) }</ns1:cnpj>
			            }
			        </ns1:titular>
			    }
			</ns1:contratoDeVenda>
        }
    </ns1:contratosDeVenda>

};



(::pragma  function <f:function kind="library" visibility="private" isPrimary="false" xmlns:f="urn:annotations.ld.bea.com"/>::)

declare function tns:buscarContratoMestreFiliado($numeroContrato as xs:long, $identificacaoCidade as xs:string) as xs:long? {
	for $snRelContratoMestreFiliado in relMestreFiliado:SnRelContratoMestreFiliadoDSP()
	where $snRelContratoMestreFiliado/NUM_CONTRATO_FILIADO eq $numeroContrato
	where $snRelContratoMestreFiliado/CID_CONTRATO eq $identificacaoCidade
	for $snContrato in contrato:SnContratoDSP()
	where $snContrato/NUM_CONTRATO eq $snRelContratoMestreFiliado/NUM_CONTRATO_MESTRE
	where $snContrato/CID_CONTRATO eq $snRelContratoMestreFiliado/CID_CONTRATO
	group by $snContrato/NUM_CONTRATO as $numContrato
		return xs:long($numContrato)
};

(::pragma  function <f:function kind="library" visibility="private" isPrimary="false" xmlns:f="urn:annotations.ld.bea.com"/>::)

declare function tns:buscarTipoContrato($numeroContrato as xs:long, $identificacaoCidade as xs:string) as xs:integer?{
	for $snContrato in contrato:SnContratoDSP()
	where $snContrato/NUM_CONTRATO eq $numeroContrato
	where $snContrato/CID_CONTRATO eq $identificacaoCidade
		return $snContrato/ID_TIPO_CONTRATO
};

